{
  "version": 3,
  "sources": ["../../src/lib/shared.ts"],
  "sourcesContent": ["import { padStart } from \"alcalzone-shared/strings\";\nimport type React from \"react\";\nimport type {\n\tAssociationAddress,\n\tControllerStatistics,\n\tFirmwareUpdateStatus,\n\tInclusionGrant,\n\tNodeStatistics,\n\tSmartStartProvisioningEntry,\n} from \"zwave-js\";\n\n// WARNING: DO NOT IMPORT values FROM \"zwave-js\" HERE\n// That will break the frontend\n\n/** Returns the id of the device object for the given node id */\nexport function computeDeviceId(nodeId: number): string {\n\treturn `Node_${padStart(nodeId.toString(), 3, \"0\")}`;\n}\n\nexport function mapToRecord<TKey extends string | number | symbol, TValue>(\n\tmap: ReadonlyMap<TKey, TValue>,\n): Record<TKey, TValue> {\n\tconst ret = {} as Record<TKey, TValue>;\n\tfor (const [k, v] of map) {\n\t\tret[k] = v;\n\t}\n\treturn ret;\n}\n\nexport function buffer2hex(buffer: Buffer): string {\n\tif (buffer.length === 0) return \"\";\n\treturn `0x${buffer.toString(\"hex\")}`;\n}\n\n/** Parses a buffer from a string has the form 0x[a-f0-9]+ */\nexport function bufferFromHex(hex: string): Buffer {\n\treturn Buffer.from(hex.substr(2), \"hex\");\n}\n\nexport function isBufferAsHex(str: string): boolean {\n\treturn /^0x([a-fA-F0-9]{2})+$/.test(str);\n}\n\nexport type PushMessage =\n\t| {\n\t\t\ttype: \"inclusion\";\n\t\t\tstatus: InclusionExclusionStatus;\n\t  }\n\t| {\n\t\t\ttype: \"healing\";\n\t\t\tstatus: NetworkHealStatus;\n\t  }\n\t| {\n\t\t\ttype: \"firmwareUpdate\";\n\t\t\tprogress: FirmwareUpdateProgress;\n\t  }\n\t| {\n\t\t\ttype: \"log\";\n\t\t\tinfo: ZWaveLogInfo;\n\t  };\n\nexport interface NetworkHealStatus {\n\ttype: \"done\" | \"progress\";\n\tprogress?: Record<number, \"pending\" | \"done\" | \"failed\" | \"skipped\">;\n}\n\nexport type InclusionExclusionStatus =\n\t| {\n\t\t\ttype: \"waitingForDevice\";\n\t  }\n\t| {\n\t\t\ttype: \"chooseReplacementStrategy\";\n\t\t\tnodeId: number;\n\t  }\n\t| {\n\t\t\ttype: \"validateDSK\";\n\t\t\tdsk: string;\n\t  }\n\t| {\n\t\t\ttype: \"grantSecurityClasses\";\n\t\t\trequest: InclusionGrant;\n\t  }\n\t| {\n\t\t\ttype: \"scanQRCode\";\n\t  }\n\t| {\n\t\t\ttype: \"busy\";\n\t  }\n\t| {\n\t\t\ttype: \"done\";\n\t\t\tnodeId: number;\n\t\t\tlowSecurity: boolean;\n\t\t\tsecurityClass?: string;\n\t  }\n\t| {\n\t\t\ttype: \"exclusionDone\";\n\t\t\tnodeId: number;\n\t  }\n\t| {\n\t\t\ttype: \"resultMessage\";\n\t\t\tsuccess: boolean;\n\t\t\ttitle: string;\n\t\t\tmessage: React.ReactNode;\n\t  };\n\nexport type ScanQRCodeResult =\n\t| {\n\t\t\ttype: \"none\" | \"S2\";\n\t  }\n\t| ({\n\t\t\ttype: \"SmartStart\" | \"provisioned\";\n\t  } & SmartStartProvisioningEntry)\n\t| {\n\t\t\ttype: \"included\";\n\t\t\tnodeId: number;\n\t  };\nexport interface FirmwareUpdateProgress {\n\ttype: \"done\" | \"progress\";\n\tsentFragments?: number;\n\ttotalFragments?: number;\n\tstatus?: FirmwareUpdateStatus;\n\twaitTime?: number;\n}\n\nexport type AssociationDefinition = AssociationAddress & {\n\tsourceEndpoint?: number;\n\tgroup: number;\n};\n\nexport interface ZWaveLogInfo {\n\tdirection: string;\n\tprimaryTags?: string;\n\tsecondaryTags?: string;\n\ttimestamp?: string;\n\tlabel?: string;\n\tmessage: string;\n}\n\nexport function getErrorMessage(e: unknown, includeStack?: boolean): string {\n\tif (e instanceof Error)\n\t\treturn includeStack && e.stack ? e.stack : e.message;\n\treturn String(e);\n}\n\nexport function getDefaultControllerStatistics(): ControllerStatistics {\n\treturn {\n\t\tCAN: 0,\n\t\tNAK: 0,\n\t\tmessagesDroppedRX: 0,\n\t\tmessagesDroppedTX: 0,\n\t\tmessagesRX: 0,\n\t\tmessagesTX: 0,\n\t\ttimeoutACK: 0,\n\t\ttimeoutCallback: 0,\n\t\ttimeoutResponse: 0,\n\t};\n}\n\nexport function getDefaultNodeStatistics(): NodeStatistics {\n\treturn {\n\t\tcommandsRX: 0,\n\t\tcommandsTX: 0,\n\t\tcommandsDroppedRX: 0,\n\t\tcommandsDroppedTX: 0,\n\t\ttimeoutResponse: 0,\n\t};\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAyB;AAelB,yBAAyB,QAAwB;AACvD,SAAO,QAAQ,6BAAS,OAAO,SAAS,GAAG,GAAG,GAAG;AAClD;AAEO,qBACN,KACuB;AACvB,QAAM,MAAM,CAAC;AACb,aAAW,CAAC,GAAG,MAAM,KAAK;AACzB,QAAI,KAAK;AAAA,EACV;AACA,SAAO;AACR;AAEO,oBAAoB,QAAwB;AAClD,MAAI,OAAO,WAAW;AAAG,WAAO;AAChC,SAAO,KAAK,OAAO,SAAS,KAAK;AAClC;AAGO,uBAAuB,KAAqB;AAClD,SAAO,OAAO,KAAK,IAAI,OAAO,CAAC,GAAG,KAAK;AACxC;AAEO,uBAAuB,KAAsB;AACnD,SAAO,wBAAwB,KAAK,GAAG;AACxC;AAiGO,yBAAyB,GAAY,cAAgC;AAC3E,MAAI,aAAa;AAChB,WAAO,gBAAgB,EAAE,QAAQ,EAAE,QAAQ,EAAE;AAC9C,SAAO,OAAO,CAAC;AAChB;AAEO,0CAAgE;AACtE,SAAO;AAAA,IACN,KAAK;AAAA,IACL,KAAK;AAAA,IACL,mBAAmB;AAAA,IACnB,mBAAmB;AAAA,IACnB,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,iBAAiB;AAAA,IACjB,iBAAiB;AAAA,EAClB;AACD;AAEO,oCAAoD;AAC1D,SAAO;AAAA,IACN,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,mBAAmB;AAAA,IACnB,mBAAmB;AAAA,IACnB,iBAAiB;AAAA,EAClB;AACD;",
  "names": []
}
