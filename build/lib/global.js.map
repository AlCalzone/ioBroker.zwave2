{
  "version": 3,
  "sources": ["../../src/lib/global.ts"],
  "sourcesContent": ["import type { AdapterInstance } from \"@iobroker/adapter-core\";\nimport { filter as objFilter } from \"alcalzone-shared/objects\";\n\nexport class Global {\n\tprivate static _adapter: AdapterInstance<true, any>;\n\tpublic static get adapter(): AdapterInstance<true, any> {\n\t\treturn Global._adapter;\n\t}\n\tpublic static set adapter(adapter: AdapterInstance<true, any>) {\n\t\tGlobal._adapter = adapter;\n\t}\n\n\t/**\n\t * Kurzschreibweise f\u00FCr die Ermittlung mehrerer Objekte\n\t * @param id\n\t */\n\tpublic static async $$(\n\t\tpattern: string,\n\t\toptions: {\n\t\t\ttype?: ioBroker.ObjectType;\n\t\t\trole?: string;\n\t\t} = {},\n\t): Promise<Record<string, ioBroker.Object>> {\n\t\tconst { type, role } = options;\n\t\tconst objects = await Global._adapter.getForeignObjectsAsync(\n\t\t\tpattern,\n\t\t\ttype,\n\t\t);\n\t\tif (role) {\n\t\t\treturn objFilter(objects, (o) => (o.common as any).role === role);\n\t\t} else {\n\t\t\treturn objects;\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA,qBAAoC;AAE7B,aAAa;AAAA,aAED,UAAsC;AACvD,WAAO,OAAO;AAAA;AAAA,aAEG,QAAQ,SAAqC;AAC9D,WAAO,WAAW;AAAA;AAAA,eAOC,GACnB,SACA,UAGI,IACuC;AAC3C,UAAM,EAAE,MAAM,SAAS;AACvB,UAAM,UAAU,MAAM,OAAO,SAAS,uBACrC,SACA;AAED,QAAI,MAAM;AACT,aAAO,2BAAU,SAAS,CAAC,MAAO,EAAE,OAAe,SAAS;AAAA,WACtD;AACN,aAAO;AAAA;AAAA;AAAA;",
  "names": []
}
