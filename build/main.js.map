{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from \"@iobroker/adapter-core\";\nimport {\n\tCommandClasses,\n\tcreateDefaultTransportFormat,\n\tMAX_NODES,\n\tparseQRCodeString,\n\tQRCodeVersion,\n\tSecurityClass,\n} from \"@zwave-js/core\";\nimport { JSONTransport } from \"@zwave-js/log-transport-json\";\nimport { getEnumMemberName } from \"@zwave-js/shared\";\nimport {\n\tcreateDeferredPromise,\n\tDeferredPromise,\n} from \"alcalzone-shared/deferred-promise\";\nimport { composeObject } from \"alcalzone-shared/objects\";\nimport { isArray } from \"alcalzone-shared/typeguards\";\nimport fs from \"fs-extra\";\nimport path from \"path\";\nimport type {\n\tAssociationAddress,\n\tAssociationGroup,\n\tCCAPI,\n\tFirmwareUpdateStatus,\n\tNodeInterviewFailedEventArgs,\n\tNodeStatistics,\n\tVirtualNode,\n\tVirtualValueID,\n\tZWaveNodeValueNotificationArgs,\n\tZWaveNotificationCallback,\n} from \"zwave-js\";\nimport {\n\tDriver,\n\textractFirmware,\n\tInterviewStage,\n\tNodeStatus,\n\tZWaveError,\n\tZWaveErrorCodes,\n\tZWaveNode,\n\tZWaveOptions,\n} from \"zwave-js\";\nimport {\n\tControllerStatistics,\n\tExclusionStrategy,\n\tHealNodeStatus,\n\tInclusionGrant,\n\tInclusionResult,\n\tInclusionStrategy,\n\tInclusionUserCallbacks,\n\tProvisioningEntryStatus,\n\tRFRegion,\n\tZWaveFeature,\n} from \"zwave-js/Controller\";\nimport { Firmware, guessFirmwareFileFormat } from \"zwave-js/Utils\";\nimport type {\n\tTranslatedValueID,\n\tValueID,\n\tZWaveNodeMetadataUpdatedArgs,\n\tZWaveNodeValueAddedArgs,\n\tZWaveNodeValueRemovedArgs,\n\tZWaveNodeValueUpdatedArgs,\n} from \"zwave-js/Values\";\nimport { Global as _ } from \"./lib/global\";\nimport {\n\tcomputeChannelId,\n\tcomputeStateId,\n\tcomputeVirtualChannelId,\n\tcomputeVirtualStateId,\n\tDEVICE_ID_BROADCAST,\n\tensureBroadcastNode,\n\textendCC,\n\textendMetadata,\n\textendNode,\n\textendNotificationValue,\n\textendNotification_NotificationCC,\n\textendValue,\n\textendVirtualMetadata,\n\textendVirtualNodeCC,\n\tnodeStatusToStatusState,\n\tremoveNode,\n\tremoveValue,\n\tsetControllerStatistics,\n\tsetNodeReady,\n\tsetNodeStatistics,\n\tsetNodeStatus,\n\tsetRFRegionState,\n} from \"./lib/objects\";\nimport { enumerateSerialPorts } from \"./lib/serialPorts\";\nimport {\n\tAssociationDefinition,\n\tbufferFromHex,\n\tcomputeDeviceId,\n\tgetErrorMessage,\n\tisBufferAsHex,\n\tmapToRecord,\n\tPushMessage,\n} from \"./lib/shared\";\n\nclass ZWave2 extends utils.Adapter<true> {\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"zwave2\",\n\t\t\tobjects: true,\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"objectChange\", this.onObjectChange.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\tthis.on(\"message\", this.onMessage.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\tprivate driver!: Driver;\n\tprivate driverReady = false;\n\tprivate readyNodes = new Set<number>();\n\tprivate virtualNodesUpdated = false;\n\tprivate initialNodeInterviewStages = new Map<number, InterviewStage>();\n\tprivate configUpdateTimeout: NodeJS.Timeout | undefined;\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Make adapter instance global\n\t\t_.adapter = this;\n\n\t\t// Clear cache if we're asked to\n\t\tconst cacheDir = path.join(\n\t\t\tutils.getAbsoluteInstanceDataDir(this),\n\t\t\t\"cache\",\n\t\t);\n\t\tif (!!this.config.clearCache) {\n\t\t\t// Remove cache dir if it exists\n\t\t\tawait fs.remove(cacheDir);\n\t\t\t// Don't do that next time we start\n\t\t\tthis.updateConfig({ clearCache: false });\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.subscribeStatesAsync(\"*\");\n\n\t\t// Reset all control states\n\t\tthis.setState(\"info.connection\", false, true);\n\t\tthis.setState(`info.inclusion`, false, true);\n\t\tthis.setState(`info.exclusion`, false, true);\n\t\tthis.setState(\"info.healingNetwork\", false, true);\n\n\t\tif (!this.config.serialport) {\n\t\t\tthis.log.warn(\n\t\t\t\t\"No serial port configured. Please select one in the adapter settings!\",\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// Apply adapter configuration\n\t\tconst timeouts: Partial<ZWaveOptions[\"timeouts\"]> | undefined = this\n\t\t\t.config.driver_increaseTimeouts\n\t\t\t? { ack: 2000 }\n\t\t\t: undefined;\n\t\tconst attempts: Partial<ZWaveOptions[\"attempts\"]> | undefined = this\n\t\t\t.config.driver_increaseSendAttempts\n\t\t\t? { sendData: 5 }\n\t\t\t: undefined;\n\n\t\tconst securityKeys: ZWaveOptions[\"securityKeys\"] = {};\n\t\tconst S0_Legacy = this.config.networkKey || this.config.networkKey_S0;\n\t\tif (typeof S0_Legacy === \"string\" && S0_Legacy.length === 32) {\n\t\t\tsecurityKeys.S0_Legacy = Buffer.from(S0_Legacy, \"hex\");\n\t\t}\n\t\tfor (const secClass of [\n\t\t\t\"S2_AccessControl\",\n\t\t\t\"S2_Authenticated\",\n\t\t\t\"S2_Unauthenticated\",\n\t\t] as const) {\n\t\t\tconst key = this.config[`networkKey_${secClass}` as const];\n\t\t\tif (typeof key === \"string\" && key.length === 32) {\n\t\t\t\tsecurityKeys[secClass] = Buffer.from(key, \"hex\");\n\t\t\t}\n\t\t}\n\n\t\tthis.driver = new Driver(this.config.serialport, {\n\t\t\ttimeouts,\n\t\t\tattempts,\n\t\t\tlogConfig: {\n\t\t\t\tlogToFile: !!this.config.writeLogFile,\n\t\t\t},\n\t\t\tstorage: {\n\t\t\t\tcacheDir,\n\t\t\t},\n\t\t\tsecurityKeys,\n\t\t\tinterview: {\n\t\t\t\t// TODO: remove this once we have a UI to query user codes\n\t\t\t\tqueryAllUserCodes: true,\n\t\t\t},\n\t\t\tenableSoftReset: !this.config.disableSoftReset,\n\t\t\tinclusionUserCallbacks: {\n\t\t\t\tvalidateDSKAndEnterPIN: (dsk: string) => {\n\t\t\t\t\tthis.validateDSKPromise = createDeferredPromise();\n\t\t\t\t\tthis.pushToFrontend({\n\t\t\t\t\t\ttype: \"inclusion\",\n\t\t\t\t\t\tstatus: {\n\t\t\t\t\t\t\ttype: \"validateDSK\",\n\t\t\t\t\t\t\tdsk,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\treturn this.validateDSKPromise;\n\t\t\t\t},\n\t\t\t\tgrantSecurityClasses: (grant: InclusionGrant) => {\n\t\t\t\t\tthis.grantSecurityClassesPromise = createDeferredPromise();\n\t\t\t\t\tthis.pushToFrontend({\n\t\t\t\t\t\ttype: \"inclusion\",\n\t\t\t\t\t\tstatus: {\n\t\t\t\t\t\t\ttype: \"grantSecurityClasses\",\n\t\t\t\t\t\t\trequest: grant,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\treturn this.grantSecurityClassesPromise;\n\t\t\t\t},\n\t\t\t\tabort: () => {\n\t\t\t\t\t// TODO\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tthis.driver.once(\"driver ready\", async () => {\n\t\t\tthis.driverReady = true;\n\t\t\tthis.setState(\"info.connection\", true, true);\n\n\t\t\tthis.log.info(\n\t\t\t\t`The driver is ready. Found ${this.driver.controller.nodes.size} nodes.`,\n\t\t\t);\n\t\t\tthis.driver.controller\n\t\t\t\t.on(\"inclusion started\", this.onInclusionStarted.bind(this))\n\t\t\t\t.on(\"exclusion started\", this.onExclusionStarted.bind(this))\n\t\t\t\t.on(\"inclusion stopped\", this.onInclusionStopped.bind(this))\n\t\t\t\t.on(\"exclusion stopped\", this.onExclusionStopped.bind(this))\n\t\t\t\t.on(\"inclusion failed\", this.onInclusionFailed.bind(this))\n\t\t\t\t.on(\"exclusion failed\", this.onExclusionFailed.bind(this))\n\t\t\t\t.on(\"node added\", this.onNodeAdded.bind(this))\n\t\t\t\t.on(\"node removed\", this.onNodeRemoved.bind(this))\n\t\t\t\t.on(\n\t\t\t\t\t\"heal network progress\",\n\t\t\t\t\tthis.onHealNetworkProgress.bind(this),\n\t\t\t\t)\n\t\t\t\t.on(\"heal network done\", this.onHealNetworkDone.bind(this))\n\t\t\t\t.on(\n\t\t\t\t\t\"statistics updated\",\n\t\t\t\t\tthis.onControllerStatisticsUpdated.bind(this),\n\t\t\t\t);\n\n\t\t\t// Kick off a regular config update check\n\t\t\tawait this.setStateAsync(\n\t\t\t\t\"info.configVersion\",\n\t\t\t\tthis.driver.configVersion,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tawait this.setStateAsync(\"info.configUpdate\", null, true);\n\t\t\tvoid this.checkForConfigUpdates();\n\n\t\t\t// Figure out which RF region the controller is using\n\t\t\ttry {\n\t\t\t\tconst rfRegion = await this.driver.controller.getRFRegion();\n\t\t\t\tawait setRFRegionState(rfRegion);\n\t\t\t} catch {\n\t\t\t\tawait setRFRegionState(undefined);\n\t\t\t}\n\n\t\t\t// Remember in which interview stage the nodes started, so we can decide whether to mark the node values as stale or not\n\t\t\tthis.initialNodeInterviewStages = new Map(\n\t\t\t\t[...this.driver.controller.nodes.values()].map((node) => [\n\t\t\t\t\tnode.id,\n\t\t\t\t\tnode.interviewStage,\n\t\t\t\t]),\n\t\t\t);\n\n\t\t\tfor (const [nodeId, node] of this.driver.controller.nodes) {\n\t\t\t\t// Reset the node status\n\t\t\t\tawait setNodeStatus(\n\t\t\t\t\tnodeId,\n\t\t\t\t\tnodeStatusToStatusState(node.status),\n\t\t\t\t);\n\t\t\t\tawait setNodeReady(nodeId, node.ready);\n\t\t\t\tthis.addNodeEventHandlers(node);\n\n\t\t\t\tif (node.ready) {\n\t\t\t\t\t// If the node is already ready, sync the states with the cache\n\t\t\t\t\tvoid this.onNodeReady(node);\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise immediately populate ioBroker states with the already-known values from cache,\n\t\t\t\t\t// so they can be overwritten with fresh ones later\n\t\t\t\t\tawait this.extendNodeObjectsAndStates(node);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Now we know which nodes should exist - clean up orphaned nodes\n\t\t\tconst nodeIdRegex = new RegExp(\n\t\t\t\t`^${this.name}\\\\.${this.instance}\\\\.Node_(\\\\d+)`,\n\t\t\t);\n\t\t\tconst existingNodeIds = (\n\t\t\t\tObject.keys(\n\t\t\t\t\tawait _.$$(`${this.namespace}.*`, { type: \"device\" }),\n\t\t\t\t)\n\t\t\t\t\t.map((id: string) => id.match(nodeIdRegex)?.[1])\n\t\t\t\t\t.filter((id) => !!id) as string[]\n\t\t\t)\n\t\t\t\t.map((id) => parseInt(id, 10))\n\t\t\t\t.filter((id, index, all) => all.indexOf(id) === index);\n\t\t\tconst unusedNodeIds = existingNodeIds.filter(\n\t\t\t\t(id) => !this.driver.controller.nodes.has(id),\n\t\t\t);\n\t\t\tfor (const nodeId of unusedNodeIds) {\n\t\t\t\tthis.log.warn(`Deleting orphaned node ${nodeId}`);\n\t\t\t\tawait removeNode(nodeId);\n\t\t\t}\n\t\t});\n\t\t// Log errors from the Z-Wave lib\n\t\tthis.driver.on(\"error\", this.onZWaveError.bind(this));\n\n\t\tthis.driver.once(\"all nodes ready\", async () => {\n\t\t\tthis.log.info(\"All nodes are ready to use\");\n\n\t\t\t// Check if the the broadcast node and multicast nodes need to be updated\n\t\t\tawait this.updateVirtualNodes();\n\t\t});\n\n\t\t// Enable sending usage statistics\n\t\ttry {\n\t\t\tthis.driver.enableStatistics({\n\t\t\t\tapplicationName: \"ioBroker.zwave2\",\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-var-requires\n\t\t\t\tapplicationVersion: require(\"iobroker.zwave2/package.json\")\n\t\t\t\t\t.version,\n\t\t\t});\n\t\t} catch {\n\t\t\t// ignore\n\t\t}\n\n\t\tthis.driver.enableErrorReporting();\n\n\t\ttry {\n\t\t\tawait this.driver.start();\n\t\t} catch (e) {\n\t\t\tthis.log.error(\n\t\t\t\t`The Z-Wave driver could not be started: ${getErrorMessage(e)}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async onInclusionStarted(\n\t\t_secure: boolean,\n\t\tstrategy: InclusionStrategy,\n\t): Promise<void> {\n\t\tthis.log.info(\n\t\t\t`inclusion started (strategy: ${InclusionStrategy[strategy]})`,\n\t\t);\n\t\tawait this.setStateAsync(\"info.inclusion\", true, true);\n\t}\n\n\tprivate async onExclusionStarted(): Promise<void> {\n\t\tthis.log.info(\"exclusion started\");\n\t\tawait this.setStateAsync(\"info.exclusion\", true, true);\n\t}\n\n\tprivate async onInclusionStopped(): Promise<void> {\n\t\tthis.log.info(\"inclusion stopped\");\n\t\tawait this.setStateAsync(\"info.inclusion\", false, true);\n\t}\n\n\tprivate async onExclusionStopped(): Promise<void> {\n\t\tthis.log.info(\"exclusion stopped\");\n\t\tawait this.setStateAsync(\"info.exclusion\", false, true);\n\t}\n\n\tprivate async onInclusionFailed(): Promise<void> {\n\t\tthis.log.info(\"inclusion failed\");\n\t\tawait this.setStateAsync(\"info.inclusion\", false, true);\n\t}\n\n\tprivate async onExclusionFailed(): Promise<void> {\n\t\tthis.log.info(\"exclusion failed\");\n\t\tawait this.setStateAsync(\"info.exclusion\", false, true);\n\t}\n\n\tprivate async onNodeAdded(\n\t\tnode: ZWaveNode,\n\t\tresult: InclusionResult,\n\t): Promise<void> {\n\t\tthis.log.info(`Node ${node.id}: added`);\n\t\t// A node was added. Once it's ready, the broadcast node and multicast nodes must be updated\n\t\tthis.virtualNodesUpdated = false;\n\n\t\tthis.addNodeEventHandlers(node);\n\t\tthis.pushToFrontend({\n\t\t\ttype: \"inclusion\",\n\t\t\tstatus: {\n\t\t\t\ttype: \"done\",\n\t\t\t\tnodeId: node.id,\n\t\t\t\tlowSecurity: !!result.lowSecurity,\n\t\t\t\tsecurityClass:\n\t\t\t\t\tSecurityClass[\n\t\t\t\t\t\tnode.getHighestSecurityClass() ?? SecurityClass.None\n\t\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate async onNodeRemoved(\n\t\tnode: ZWaveNode,\n\t\treplaced: boolean,\n\t): Promise<void> {\n\t\tif (replaced) {\n\t\t\tthis.log.info(`Node ${node.id}: replace started`);\n\t\t\tthis.readyNodes.delete(node.id);\n\t\t} else {\n\t\t\tthis.log.info(`Node ${node.id}: removed`);\n\t\t\tthis.pushToFrontend({\n\t\t\t\ttype: \"inclusion\",\n\t\t\t\tstatus: {\n\t\t\t\t\ttype: \"exclusionDone\",\n\t\t\t\t\tnodeId: node.id,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tnode.removeAllListeners();\n\t\tawait removeNode(node.id);\n\n\t\t// Check if the the broadcast node and multicast nodes need to be updated\n\t\tthis.virtualNodesUpdated = false;\n\t\tawait this.updateVirtualNodes();\n\t}\n\n\tprivate async onHealNetworkProgress(\n\t\tprogress: ReadonlyMap<number, HealNodeStatus>,\n\t): Promise<void> {\n\t\tconst allDone = [...progress.values()].every((v) => v !== \"pending\");\n\t\t// If this is the final progress report, skip it, so the frontend gets the \"done\" message\n\t\tif (allDone) return;\n\t\tthis.pushToFrontend({\n\t\t\ttype: \"healing\",\n\t\t\tstatus: {\n\t\t\t\ttype: \"progress\",\n\t\t\t\tprogress: mapToRecord(progress),\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate async onHealNetworkDone(\n\t\tresult: ReadonlyMap<number, HealNodeStatus>,\n\t): Promise<void> {\n\t\tthis.pushToFrontend({\n\t\t\ttype: \"healing\",\n\t\t\tstatus: {\n\t\t\t\ttype: \"done\",\n\t\t\t\tprogress: mapToRecord(result),\n\t\t\t},\n\t\t});\n\t\tthis.setState(\"info.healingNetwork\", false, true);\n\t}\n\n\tprivate async onControllerStatisticsUpdated(\n\t\tstatistics: ControllerStatistics,\n\t): Promise<void> {\n\t\tawait setControllerStatistics(statistics);\n\t}\n\n\tprivate addNodeEventHandlers(node: ZWaveNode): void {\n\t\tnode.on(\"ready\", this.onNodeReady.bind(this))\n\t\t\t.on(\"interview failed\", this.onNodeInterviewFailed.bind(this))\n\t\t\t.on(\"interview completed\", this.onNodeInterviewCompleted.bind(this))\n\t\t\t.on(\"wake up\", this.onNodeWakeUp.bind(this))\n\t\t\t.on(\"sleep\", this.onNodeSleep.bind(this))\n\t\t\t.on(\"alive\", this.onNodeAlive.bind(this))\n\t\t\t.on(\"dead\", this.onNodeDead.bind(this))\n\t\t\t.on(\"value added\", this.onNodeValueAdded.bind(this))\n\t\t\t.on(\"value updated\", this.onNodeValueUpdated.bind(this))\n\t\t\t.on(\"value removed\", this.onNodeValueRemoved.bind(this))\n\t\t\t.on(\"value notification\", this.onNodeValueNotification.bind(this))\n\t\t\t.on(\"metadata updated\", this.onNodeMetadataUpdated.bind(this))\n\t\t\t.on(\n\t\t\t\t\"firmware update progress\",\n\t\t\t\tthis.onNodeFirmwareUpdateProgress.bind(this),\n\t\t\t)\n\t\t\t.on(\n\t\t\t\t\"firmware update finished\",\n\t\t\t\tthis.onNodeFirmwareUpdateFinished.bind(this),\n\t\t\t)\n\t\t\t.on(\"notification\", this.onNodeNotification.bind(this))\n\t\t\t.on(\"statistics updated\", this.onNodeStatisticsUpdated.bind(this));\n\t}\n\n\tprivate async onNodeReady(node: ZWaveNode): Promise<void> {\n\t\t// Only execute this once\n\t\tif (this.readyNodes.has(node.id)) return;\n\t\tthis.readyNodes.add(node.id);\n\n\t\tthis.log.info(`Node ${node.id}: ready to use`);\n\n\t\t// Set the node status\n\t\tawait setNodeStatus(\n\t\t\tnode.id,\n\t\t\tnode.id === this.driver.controller.ownNodeId\n\t\t\t\t? \"alive\"\n\t\t\t\t: nodeStatusToStatusState(node.status),\n\t\t);\n\t\tawait setNodeReady(node.id, true);\n\n\t\tconst allValueIDs = node.getDefinedValueIDs();\n\t\tawait this.extendNodeObjectsAndStates(node, allValueIDs);\n\t\t// The controller node has no states and channels we need to clean up\n\t\tif (!node.isControllerNode) {\n\t\t\tawait this.cleanupNodeObjectsAndStates(node, allValueIDs);\n\t\t}\n\n\t\t// Check if the the broadcast node and multicast nodes need to be updated\n\t\tawait this.updateVirtualNodes();\n\t}\n\n\tprivate async updateVirtualNodes(): Promise<void> {\n\t\t// Only update the broadcast node when something relevant changed\n\t\tif (this.virtualNodesUpdated) return;\n\t\tthis.virtualNodesUpdated = true;\n\t\tthis.log.info(`Updating broadcast/multicast node states`);\n\n\t\t// Broadcast first\n\t\tlet node: VirtualNode = this.driver.controller.getBroadcastNode();\n\t\tconst allValueIDs = node.getDefinedValueIDs();\n\t\t// Make sure the broadcast device object exists and is up to date\n\t\tawait ensureBroadcastNode();\n\t\tawait this.extendVirtualNodeObjectsAndStates(\n\t\t\tnode,\n\t\t\tDEVICE_ID_BROADCAST,\n\t\t\tallValueIDs,\n\t\t);\n\t\tawait this.cleanupVirtualNodeObjects(DEVICE_ID_BROADCAST, allValueIDs);\n\n\t\t// Then all multicast nodes\n\t\tconst multicastNodes = await this.getMulticastNodeDefinitions();\n\t\tfor (const { objId, nodeIds } of multicastNodes) {\n\t\t\tnode = this.driver.controller.getMulticastGroup(\n\t\t\t\tnodeIds.filter((n: number) =>\n\t\t\t\t\tthis.driver.controller.nodes.has(n),\n\t\t\t\t),\n\t\t\t);\n\t\t\tconst allValueIDs = node.getDefinedValueIDs();\n\t\t\tconst deviceId = objId.substr(this.namespace.length + 1);\n\t\t\tawait this.extendVirtualNodeObjectsAndStates(\n\t\t\t\tnode,\n\t\t\t\tdeviceId,\n\t\t\t\tallValueIDs,\n\t\t\t);\n\t\t\tawait this.cleanupVirtualNodeObjects(deviceId, allValueIDs);\n\t\t}\n\n\t\t// Then clean up multicast nodes that have been deleted without deleting their subtrees\n\t\tawait this.cleanupOrphanedMulticastNodeTrees(\n\t\t\tmulticastNodes.map((n) => n.objId),\n\t\t);\n\t}\n\n\tprivate async getMulticastNodeDefinitions() {\n\t\tconst devices = (\n\t\t\tawait this.getObjectViewAsync(\"system\", \"device\", {\n\t\t\t\tstartkey: `${this.namespace}.Group_`,\n\t\t\t\tendkey: `${this.namespace}.Group_\\u9999`,\n\t\t\t})\n\t\t).rows\n\t\t\t.map((r) => r.value)\n\t\t\t.filter((o): o is ioBroker.DeviceObject => !!o);\n\n\t\tconst ret: { objId: string; nodeIds: number[] }[] = [];\n\t\tfor (const d of devices) {\n\t\t\tif (!d.native.multicast) continue;\n\t\t\tif (!isArray(d.native.nodeIds) || !d.native.nodeIds.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!d.native.nodeIds.every(\n\t\t\t\t\t(n: any) =>\n\t\t\t\t\t\ttypeof n === \"number\" && n > 0 && n <= MAX_NODES,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.log.warn(\n\t\t\t\t\t`Multicast group object ${d._id} contains invalid node IDs, ignoring it!`,\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst missingNodes = (d.native.nodeIds as number[]).filter(\n\t\t\t\t(n) => !this.driver.controller.nodes.has(n),\n\t\t\t);\n\t\t\tif (missingNodes.length) {\n\t\t\t\tthis.log.warn(\n\t\t\t\t\t`Multicast group ${\n\t\t\t\t\t\td._id\n\t\t\t\t\t} references missing nodes ${missingNodes.join(\", \")}!`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tret.push({ objId: d._id, nodeIds: d.native.nodeIds });\n\t\t}\n\t\treturn ret;\n\t}\n\n\tprivate async cleanupOrphanedMulticastNodeTrees(\n\t\tmulticastGroupIds: string[],\n\t) {\n\t\tconst objectIds = [\n\t\t\t...(\n\t\t\t\tawait this.getObjectViewAsync(\"system\", \"channel\", {\n\t\t\t\t\tstartkey: `${this.namespace}.Group_`,\n\t\t\t\t\tendkey: `${this.namespace}.Group_\\u9999`,\n\t\t\t\t})\n\t\t\t).rows.map((r) => r.value),\n\t\t\t...(\n\t\t\t\tawait this.getObjectViewAsync(\"system\", \"state\", {\n\t\t\t\t\tstartkey: `${this.namespace}.Group_`,\n\t\t\t\t\tendkey: `${this.namespace}.Group_\\u9999`,\n\t\t\t\t})\n\t\t\t).rows.map((r) => r.value),\n\t\t]\n\t\t\t.map((o) => o?._id)\n\t\t\t.filter((id): id is string => !!id);\n\n\t\tconst orphanedIds = objectIds.filter(\n\t\t\t(oid) =>\n\t\t\t\t!multicastGroupIds.some((gid) => oid.startsWith(gid + \".\")),\n\t\t);\n\n\t\tfor (const id of orphanedIds) {\n\t\t\tthis.log.debug(`Deleting orphaned multicast object ${id}`);\n\t\t\ttry {\n\t\t\t\tawait this.delObjectAsync(id);\n\t\t\t} catch (e) {\n\t\t\t\t/* it's fine */\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async extendNodeObjectsAndStates(\n\t\tnode: ZWaveNode,\n\t\tallValueIDs?: TranslatedValueID[],\n\t): Promise<void> {\n\t\t// Make sure the device object exists and is up to date\n\t\tawait extendNode(node);\n\n\t\t// Skip channel and state creation for the controller node\n\t\tif (node.isControllerNode) return;\n\n\t\t// Collect all objects and states we have values for\n\t\tallValueIDs ??= node.getDefinedValueIDs();\n\t\tconst uniqueCCs = allValueIDs\n\t\t\t.map((vid) => [vid.commandClass, vid.commandClassName] as const)\n\t\t\t.filter(\n\t\t\t\t([cc], index, arr) =>\n\t\t\t\t\tarr.findIndex(([_cc]) => _cc === cc) === index,\n\t\t\t);\n\n\t\t// Make sure all channel objects are up to date\n\t\tfor (const [cc, ccName] of uniqueCCs) {\n\t\t\tawait extendCC(node, cc, ccName);\n\t\t}\n\n\t\t// Sync the ioBroker states with the cached values. This must only happen if the interview is not complete yet\n\t\t// or the node started ready. Otherwise this would incorrectly mark all fresh values as stale\n\t\tif (\n\t\t\tnode.interviewStage < InterviewStage.Complete ||\n\t\t\t(node.interviewStage === InterviewStage.Complete &&\n\t\t\t\tthis.initialNodeInterviewStages.get(node.id) ===\n\t\t\t\t\tInterviewStage.Complete)\n\t\t) {\n\t\t\tfor (const valueId of allValueIDs) {\n\t\t\t\tconst value = node.getValue(valueId);\n\t\t\t\tawait extendValue(\n\t\t\t\t\tnode,\n\t\t\t\t\t{\n\t\t\t\t\t\t...valueId,\n\t\t\t\t\t\tnewValue: value,\n\t\t\t\t\t},\n\t\t\t\t\t// The value is cached\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async extendVirtualNodeObjectsAndStates(\n\t\tnode: VirtualNode,\n\t\tdeviceId: string,\n\t\tvalueIDs: VirtualValueID[],\n\t): Promise<void> {\n\t\t// Collect all objects and states we have values for\n\t\tconst uniqueCCs = valueIDs\n\t\t\t.map((vid) => [vid.commandClass, vid.commandClassName] as const)\n\t\t\t.filter(\n\t\t\t\t([cc], index, arr) =>\n\t\t\t\t\tarr.findIndex(([_cc]) => _cc === cc) === index,\n\t\t\t);\n\n\t\t// Make sure all channel objects are up to date\n\t\tfor (const [cc, ccName] of uniqueCCs) {\n\t\t\tawait extendVirtualNodeCC(node, deviceId, cc, ccName);\n\t\t}\n\n\t\t// Make sure each value ID has a corresponding state in ioBroker\n\t\tfor (const valueId of valueIDs) {\n\t\t\tawait extendVirtualMetadata(node, deviceId, valueId);\n\t\t}\n\t}\n\n\tprivate async cleanupNodeObjectsAndStates(\n\t\tnode: ZWaveNode,\n\t\tallValueIDs?: TranslatedValueID[],\n\t): Promise<void> {\n\t\t// Find out which channels and states need to exist\n\t\tallValueIDs ??= node.getDefinedValueIDs();\n\t\tconst uniqueCCs = allValueIDs\n\t\t\t.map((vid) => [vid.commandClass, vid.commandClassName] as const)\n\t\t\t.filter(\n\t\t\t\t([cc], index, arr) =>\n\t\t\t\t\tarr.findIndex(([_cc]) => _cc === cc) === index,\n\t\t\t);\n\n\t\tconst nodeAbsoluteId = `${this.namespace}.${computeDeviceId(node.id)}`;\n\n\t\tconst desiredChannelIds = new Set(\n\t\t\tuniqueCCs.map(\n\t\t\t\t([, ccName]) =>\n\t\t\t\t\t`${this.namespace}.${computeChannelId(node.id, ccName)}`,\n\t\t\t),\n\t\t);\n\t\tconst existingChannelIds = Object.keys(\n\t\t\tawait _.$$(`${nodeAbsoluteId}.*`, {\n\t\t\t\ttype: \"channel\",\n\t\t\t}),\n\t\t);\n\t\tconst desiredStateIds = new Set(\n\t\t\tallValueIDs.map(\n\t\t\t\t(vid) => `${this.namespace}.${computeStateId(node.id, vid)}`,\n\t\t\t),\n\t\t);\n\t\tconst existingStateIds = Object.keys(\n\t\t\tawait _.$$(`${nodeAbsoluteId}.*`, {\n\t\t\t\ttype: \"state\",\n\t\t\t}),\n\t\t);\n\n\t\t// Clean up unused channels and states\n\t\tconst unusedChannels = existingChannelIds\n\t\t\t.filter((id) => !desiredChannelIds.has(id))\n\t\t\t// filter out the info channel\n\t\t\t.filter((id) => id.slice(nodeAbsoluteId.length + 1) !== \"info\");\n\n\t\tfor (const id of unusedChannels) {\n\t\t\tthis.log.warn(`Deleting orphaned channel ${id}`);\n\t\t\ttry {\n\t\t\t\tawait this.delObjectAsync(id);\n\t\t\t} catch (e) {\n\t\t\t\t/* it's fine */\n\t\t\t}\n\t\t}\n\n\t\tconst unusedStates = existingStateIds\n\t\t\t// select those states that are not desired\n\t\t\t.filter((id) => !desiredStateIds.has(id))\n\t\t\t// filter out those states that are not under a CC channel\n\t\t\t.filter((id) => id.slice(nodeAbsoluteId.length + 1).includes(\".\"))\n\t\t\t// or under the info channel\n\t\t\t.filter(\n\t\t\t\t(id) =>\n\t\t\t\t\t!id.slice(nodeAbsoluteId.length + 1).startsWith(\"info.\"),\n\t\t\t)\n\t\t\t// and filter out those states that are for a notification event\n\t\t\t.filter((id) => !this.oObjects[id]?.native?.notificationEvent);\n\n\t\tfor (const id of unusedStates) {\n\t\t\tthis.log.warn(`Deleting orphaned state ${id}`);\n\t\t\ttry {\n\t\t\t\tawait this.delStateAsync(id);\n\t\t\t} catch (e) {\n\t\t\t\t/* it's fine */\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tawait this.delObjectAsync(id);\n\t\t\t} catch (e) {\n\t\t\t\t/* it's fine */\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async cleanupVirtualNodeObjects(\n\t\tdeviceId: string,\n\t\tvalueIDs: TranslatedValueID[],\n\t): Promise<void> {\n\t\t// Find out which channels and states need to exist\n\t\tconst uniqueCCs = valueIDs\n\t\t\t.map((vid) => [vid.commandClass, vid.commandClassName] as const)\n\t\t\t.filter(\n\t\t\t\t([cc], index, arr) =>\n\t\t\t\t\tarr.findIndex(([_cc]) => _cc === cc) === index,\n\t\t\t);\n\n\t\tconst nodeAbsoluteId = `${this.namespace}.${deviceId}`;\n\n\t\tconst desiredChannelIds = new Set(\n\t\t\tuniqueCCs.map(\n\t\t\t\t([, ccName]) =>\n\t\t\t\t\t`${this.namespace}.${computeVirtualChannelId(\n\t\t\t\t\t\tdeviceId,\n\t\t\t\t\t\tccName,\n\t\t\t\t\t)}`,\n\t\t\t),\n\t\t);\n\t\tconst existingChannelIds = Object.keys(\n\t\t\tawait _.$$(`${nodeAbsoluteId}.*`, {\n\t\t\t\ttype: \"channel\",\n\t\t\t}),\n\t\t);\n\t\tconst desiredStateIds = new Set(\n\t\t\tvalueIDs.map(\n\t\t\t\t(vid) =>\n\t\t\t\t\t`${this.namespace}.${computeVirtualStateId(deviceId, vid)}`,\n\t\t\t),\n\t\t);\n\t\tconst existingStateIds = Object.keys(\n\t\t\tawait _.$$(`${nodeAbsoluteId}.*`, {\n\t\t\t\ttype: \"state\",\n\t\t\t}),\n\t\t);\n\n\t\t// Clean up unused channels and states\n\t\tconst unusedChannels = existingChannelIds.filter(\n\t\t\t(id) => !desiredChannelIds.has(id),\n\t\t);\n\t\tfor (const id of unusedChannels) {\n\t\t\tthis.log.warn(`Deleting orphaned channel ${id}`);\n\t\t\ttry {\n\t\t\t\tawait this.delObjectAsync(id);\n\t\t\t} catch (e) {\n\t\t\t\t/* it's fine */\n\t\t\t}\n\t\t}\n\n\t\tconst unusedStates = existingStateIds\n\t\t\t// select those states that are not desired\n\t\t\t.filter((id) => !desiredStateIds.has(id))\n\t\t\t// filter out those states that are not under a CC channel\n\t\t\t.filter((id) => id.slice(nodeAbsoluteId.length + 1).includes(\".\"))\n\t\t\t// and filter out those states that are for a notification event\n\t\t\t.filter((id) => !this.oObjects[id]?.native?.notificationEvent);\n\n\t\tfor (const id of unusedStates) {\n\t\t\tthis.log.warn(`Deleting orphaned virtual state ${id}`);\n\t\t\ttry {\n\t\t\t\tawait this.delObjectAsync(id);\n\t\t\t} catch (e) {\n\t\t\t\t/* it's fine */\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async ensureDeviceObject(node: ZWaveNode): Promise<void> {\n\t\tconst nodeAbsoluteId = `${this.namespace}.${computeDeviceId(node.id)}`;\n\t\tif (\n\t\t\t!this.readyNodes.has(node.id) &&\n\t\t\t!(nodeAbsoluteId in this.oObjects)\n\t\t) {\n\t\t\tawait extendNode(node);\n\t\t}\n\t}\n\n\tprivate async onNodeInterviewFailed(\n\t\tnode: ZWaveNode,\n\t\targs: NodeInterviewFailedEventArgs,\n\t): Promise<void> {\n\t\tif (args.isFinal) {\n\t\t\tthis.log.error(\n\t\t\t\t`Node ${node.id} interview failed: ${args.errorMessage}`,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.log.warn(\n\t\t\t\t`Node ${node.id} interview failed: ${args.errorMessage}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async onNodeInterviewCompleted(node: ZWaveNode): Promise<void> {\n\t\tthis.log.info(`Node ${node.id} interview completed`);\n\t}\n\n\tprivate async onNodeWakeUp(\n\t\tnode: ZWaveNode,\n\t\toldStatus: NodeStatus,\n\t): Promise<void> {\n\t\tawait setNodeStatus(node.id, \"awake\");\n\t\tthis.log.info(\n\t\t\t`Node ${node.id} is ${\n\t\t\t\toldStatus === NodeStatus.Unknown ? \"\" : \"now \"\n\t\t\t}awake`,\n\t\t);\n\t}\n\n\tprivate async onNodeSleep(\n\t\tnode: ZWaveNode,\n\t\toldStatus: NodeStatus,\n\t): Promise<void> {\n\t\tawait setNodeStatus(node.id, \"asleep\");\n\t\tthis.log.info(\n\t\t\t`Node ${node.id} is ${\n\t\t\t\toldStatus === NodeStatus.Unknown ? \"\" : \"now \"\n\t\t\t}asleep`,\n\t\t);\n\n\t\t// ensure we have a device object or users cannot remove failed nodes from the network\n\t\tawait this.ensureDeviceObject(node);\n\t}\n\n\tprivate async onNodeAlive(\n\t\tnode: ZWaveNode,\n\t\toldStatus: NodeStatus,\n\t): Promise<void> {\n\t\tawait setNodeStatus(node.id, \"alive\");\n\t\tif (oldStatus === NodeStatus.Dead) {\n\t\t\tthis.log.info(`Node ${node.id}: has returned from the dead`);\n\t\t} else {\n\t\t\tthis.log.info(`Node ${node.id} is alive`);\n\t\t}\n\t}\n\n\tprivate async onNodeDead(\n\t\tnode: ZWaveNode,\n\t\toldStatus: NodeStatus,\n\t): Promise<void> {\n\t\tawait setNodeStatus(node.id, \"dead\");\n\t\tthis.log.info(\n\t\t\t`Node ${node.id} is ${\n\t\t\t\toldStatus === NodeStatus.Unknown ? \"\" : \"now \"\n\t\t\t}dead`,\n\t\t);\n\n\t\t// ensure we have a device object or users cannot remove failed nodes from the network\n\t\tawait this.ensureDeviceObject(node);\n\t}\n\n\tprivate async onNodeValueAdded(\n\t\tnode: ZWaveNode,\n\t\targs: ZWaveNodeValueAddedArgs,\n\t): Promise<void> {\n\t\tlet propertyName = computeStateId(node.id, args);\n\t\tpropertyName = propertyName.substr(propertyName.lastIndexOf(\".\") + 1);\n\t\tthis.log.debug(\n\t\t\t`Node ${node.id}: value added: ${propertyName} => ${String(\n\t\t\t\targs.newValue,\n\t\t\t)}`,\n\t\t);\n\t\tawait extendValue(node, args);\n\t\tif (this.config.switchCompat) await this.syncSwitchStates(node, args);\n\t}\n\n\tprivate async onNodeValueUpdated(\n\t\tnode: ZWaveNode,\n\t\targs: ZWaveNodeValueUpdatedArgs,\n\t): Promise<void> {\n\t\tlet propertyName = computeStateId(node.id, args);\n\t\tpropertyName = propertyName.substr(propertyName.lastIndexOf(\".\") + 1);\n\t\tthis.log.debug(\n\t\t\t`Node ${node.id}: value updated: ${propertyName} => ${String(\n\t\t\t\targs.newValue,\n\t\t\t)}`,\n\t\t);\n\t\tawait extendValue(node, args);\n\t\tif (this.config.switchCompat) await this.syncSwitchStates(node, args);\n\t}\n\n\tprivate async onNodeValueNotification(\n\t\tnode: ZWaveNode,\n\t\targs: ZWaveNodeValueNotificationArgs,\n\t): Promise<void> {\n\t\tlet propertyName = computeStateId(node.id, args);\n\t\tpropertyName = propertyName.substr(propertyName.lastIndexOf(\".\") + 1);\n\t\tthis.log.debug(\n\t\t\t`Node ${node.id}: value notification: ${propertyName} = ${String(\n\t\t\t\targs.value,\n\t\t\t)}`,\n\t\t);\n\t\tawait extendNotificationValue(node, args);\n\t}\n\n\t/** Overwrites `targetValue` states with `currentValue` */\n\tprivate async syncSwitchStates(\n\t\tnode: ZWaveNode,\n\t\targs: ZWaveNodeValueAddedArgs | ZWaveNodeValueUpdatedArgs,\n\t): Promise<void> {\n\t\tif (\n\t\t\t(args.commandClass === CommandClasses[\"Binary Switch\"] ||\n\t\t\t\targs.commandClass === CommandClasses[\"Multilevel Switch\"]) &&\n\t\t\targs.property === \"currentValue\"\n\t\t) {\n\t\t\tawait extendValue(node, {\n\t\t\t\t...args,\n\t\t\t\tproperty: \"targetValue\",\n\t\t\t\tpropertyName: \"targetValue\",\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async onNodeValueRemoved(\n\t\tnode: ZWaveNode,\n\t\targs: ZWaveNodeValueRemovedArgs,\n\t): Promise<void> {\n\t\tlet propertyName = computeStateId(node.id, args);\n\t\tpropertyName = propertyName.substr(propertyName.lastIndexOf(\".\") + 1);\n\t\tthis.log.debug(`Node ${node.id}: value removed: ${propertyName}`);\n\t\tawait removeValue(node.id, args);\n\t}\n\n\tprivate async onNodeMetadataUpdated(\n\t\tnode: ZWaveNode,\n\t\targs: ZWaveNodeMetadataUpdatedArgs,\n\t): Promise<void> {\n\t\tlet propertyName = computeStateId(node.id, args);\n\t\tpropertyName = propertyName.substr(propertyName.lastIndexOf(\".\") + 1);\n\t\tthis.log.debug(`Node ${node.id}: metadata updated: ${propertyName}`);\n\t\tawait extendMetadata(node, args);\n\t}\n\n\tprivate async onNodeFirmwareUpdateProgress(\n\t\tnode: ZWaveNode,\n\t\tsentFragments: number,\n\t\ttotalFragments: number,\n\t): Promise<void> {\n\t\tthis.pushToFrontend({\n\t\t\ttype: \"firmwareUpdate\",\n\t\t\tprogress: {\n\t\t\t\ttype: \"progress\",\n\t\t\t\tsentFragments,\n\t\t\t\ttotalFragments,\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate async onNodeFirmwareUpdateFinished(\n\t\tnode: ZWaveNode,\n\t\tstatus: FirmwareUpdateStatus,\n\t\twaitTime?: number,\n\t): Promise<void> {\n\t\tthis.pushToFrontend({\n\t\t\ttype: \"firmwareUpdate\",\n\t\t\tprogress: {\n\t\t\t\ttype: \"done\",\n\t\t\t\tstatus,\n\t\t\t\twaitTime,\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate onNodeNotification: ZWaveNotificationCallback = async (\n\t\t...params\n\t) => {\n\t\tif (params[1] === CommandClasses.Notification) {\n\t\t\tconst [node, , args] = params;\n\t\t\tthis.log.debug(\n\t\t\t\t`Node ${node.id}: received notification: ${args.label} - ${args.eventLabel}`,\n\t\t\t);\n\t\t\tawait extendNotification_NotificationCC(node, args);\n\t\t}\n\t};\n\n\tprivate async onNodeStatisticsUpdated(\n\t\tnode: ZWaveNode,\n\t\tstatistics: NodeStatistics,\n\t): Promise<void> {\n\t\tawait setNodeStatistics(node.id, statistics);\n\t}\n\n\tprivate async checkForConfigUpdates(): Promise<void> {\n\t\t// Check if there is a config update only if we don't know there is one\n\t\tif (!(await this.getStateAsync(\"info.configUpdate\"))?.val) {\n\t\t\ttry {\n\t\t\t\tawait this.setStateChangedAsync(\n\t\t\t\t\t\"info.configUpdate\",\n\t\t\t\t\t(await this.driver.checkForConfigUpdates()) ?? null,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\tawait this.setStateChangedAsync(\n\t\t\t\t\t\"info.configUpdate\",\n\t\t\t\t\tnull,\n\t\t\t\t\ttrue,\n\t\t\t\t);\n\t\t\t\tthis.log.error(\n\t\t\t\t\t`Failed to check for config updates: ${getErrorMessage(e)}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Figure out when the next update should be. New versions are normally released between 02:00 and 03:00 UTC\n\t\t// Checking at 05:00 UTC should be safe\n\t\tconst hour = new Date().getUTCHours();\n\t\tlet timeoutHours = 5 - hour;\n\t\tif (timeoutHours <= 0) timeoutHours += 24;\n\t\tthis.configUpdateTimeout = setTimeout(\n\t\t\t() => this.checkForConfigUpdates(),\n\t\t\ttimeoutHours * 3600 * 1000,\n\t\t);\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate async onUnload(callback: () => void): Promise<void> {\n\t\ttry {\n\t\t\tthis.log.info(\"Shutting down driver...\");\n\t\t\tconst allNodeIds = [...this.driver.controller.nodes.keys()];\n\t\t\tawait this.driver.destroy();\n\n\t\t\tthis.log.info(\"Resetting node status...\");\n\t\t\tfor (const nodeId of allNodeIds) {\n\t\t\t\tawait setNodeStatus(nodeId, \"unknown\");\n\t\t\t\tawait setNodeReady(nodeId, false);\n\t\t\t\tawait setNodeStatistics(nodeId, null);\n\t\t\t}\n\n\t\t\tif (this.configUpdateTimeout)\n\t\t\t\tclearTimeout(this.configUpdateTimeout);\n\t\t\tif (this.pushPayloadExpirationTimeout)\n\t\t\t\tclearTimeout(this.pushPayloadExpirationTimeout);\n\n\t\t\tawait this.setStateAsync(\"info.configUpdating\", false, true);\n\t\t\tawait setControllerStatistics(null);\n\n\t\t\tthis.log.info(\"Cleaned everything up!\");\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * Is called when the Z-Wave lib has a non-critical error\n\t */\n\tprivate async onZWaveError(error: Error): Promise<void> {\n\t\tlet level: \"warn\" | \"error\" = \"error\";\n\t\t// Treat non-critical errors as warnings\n\t\tif (\n\t\t\terror instanceof ZWaveError &&\n\t\t\terror.code === ZWaveErrorCodes.Controller_NodeInsecureCommunication\n\t\t) {\n\t\t\tlevel = \"warn\";\n\t\t}\n\n\t\tthis.log[level](error.message);\n\n\t\tif (\n\t\t\terror instanceof ZWaveError &&\n\t\t\terror.code === ZWaveErrorCodes.Driver_Failed\n\t\t) {\n\t\t\t// This should not happen too regularly, so ask JS-Controller to restart the adapter\n\t\t\tthis.log.error(`Restarting the adapter in a second...`);\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.terminate(utils.EXIT_CODES.START_IMMEDIATELY_AFTER_STOP);\n\t\t\t}, 1000);\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed object changes\n\t */\n\tprivate async onObjectChange(\n\t\tid: string,\n\t\t_obj: ioBroker.Object | null | undefined,\n\t): Promise<void> {\n\t\tconst prefix = this.namespace + \".Group_\";\n\t\tif (id.startsWith(prefix) && id.indexOf(\".\", prefix.length) === -1) {\n\t\t\t// A multicast group was changed, check if their object trees need to be updated\n\t\t\t// Check if the the broadcast node and multicast nodes need to be updated\n\t\t\tthis.virtualNodesUpdated = false;\n\t\t\tawait this.updateVirtualNodes();\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate async onStateChange(\n\t\tid: string,\n\t\tstate: ioBroker.State | null | undefined,\n\t): Promise<void> {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tif (!state.ack) {\n\t\t\t\t// Make sure we can already use the Z-Wave driver\n\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\tthis.log.warn(\n\t\t\t\t\t\t`The driver is not yet ready, ignoring state change for \"${id}\"`,\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Handle some special states first\n\t\t\t\tif (id.endsWith(\"info.exclusion\")) {\n\t\t\t\t\tawait this.setExclusionMode(state.val as any);\n\t\t\t\t\treturn;\n\t\t\t\t} else if (id.startsWith(`${this.namespace}.info.`)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise perform the default handling for values\n\t\t\t\tconst obj = this.oObjects[id];\n\t\t\t\tif (!obj) {\n\t\t\t\t\tthis.log.error(\n\t\t\t\t\t\t`Object definition for state ${id} is missing!`,\n\t\t\t\t\t);\n\t\t\t\t\t// TODO: Capture this with sentry?\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { native } = obj;\n\n\t\t\t\tconst valueId: ValueID | undefined = native.valueId;\n\t\t\t\tif (\n\t\t\t\t\t!(\n\t\t\t\t\t\tvalueId &&\n\t\t\t\t\t\ttypeof valueId.commandClass === \"number\" &&\n\t\t\t\t\t\t(typeof valueId.property === \"number\" ||\n\t\t\t\t\t\t\ttypeof valueId.property === \"string\")\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tthis.log.error(\n\t\t\t\t\t\t`Value ID missing or incomplete in object definition ${id}!`,\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet node: VirtualNode | ZWaveNode;\n\t\t\t\tif (!!native.broadcast) {\n\t\t\t\t\tnode = this.driver.controller.getBroadcastNode();\n\t\t\t\t} else if (isArray(native.nodeIds)) {\n\t\t\t\t\tnode = this.driver.controller.getMulticastGroup(\n\t\t\t\t\t\tnative.nodeIds.filter((n: number) =>\n\t\t\t\t\t\t\tthis.driver.controller.nodes.has(n),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tconst nodeId = native.nodeId;\n\t\t\t\t\tif (!nodeId) {\n\t\t\t\t\t\tthis.log.error(\n\t\t\t\t\t\t\t`Node ID missing from object definition ${id}!`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tnode = this.driver.controller.nodes.getOrThrow(nodeId);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tthis.log.error(`Node ${nodeId} does not exist!`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Some CCs accept Buffers. In order to edit them in ioBroker, we support parsing strings like \"0xbada55\" as Buffers.\n\t\t\t\tlet newValue: unknown = state.val;\n\t\t\t\tif (typeof newValue === \"string\" && isBufferAsHex(newValue)) {\n\t\t\t\t\tnewValue = bufferFromHex(newValue);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait node.setValue(valueId, newValue);\n\t\t\t\t\t// Don't use newValue to update ioBroker states, these are only for zwave-js\n\t\t\t\t\tawait this.setStateAsync(id, { val: state.val, ack: true });\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.log.error(getErrorMessage(e));\n\t\t\t\t}\n\t\t\t}\n\t\t} /* else {\n\t\t\t// The state was deleted\n\t\t} */\n\t}\n\n\tprivate async setExclusionMode(active: boolean): Promise<void> {\n\t\ttry {\n\t\t\tif (active) {\n\t\t\t\tawait this.driver.controller.beginExclusion({\n\t\t\t\t\tstrategy: ExclusionStrategy.DisableProvisioningEntry,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tawait this.driver.controller.stopExclusion();\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t/* nothing to do */\n\t\t\tthis.log.error(getErrorMessage(e));\n\t\t}\n\t}\n\n\t// This is used to store responses if something changed between two polls\n\tprivate pushPayloads: PushMessage[] = [];\n\t// This is used to store the callback if there was no response yet\n\tprivate pushCallbacks = new Map<string, (payload: PushMessage[]) => void>();\n\t// This is used to timeout expired payloads when there hasn't been a poll in a while\n\tprivate pushPayloadExpirationTimeout: NodeJS.Timeout | undefined;\n\tprivate pushToFrontendBusy = false;\n\n\t/** Responds to a pending poll from the frontend (if there is a message outstanding) */\n\tprivate pushToFrontend(payload: PushMessage): void {\n\t\tthis.pushPayloads.push(payload);\n\t\tif (this.pushToFrontendBusy) return;\n\t\tthis.pushToFrontendBusy = true;\n\t\tif (this.pushCallbacks.size > 0) {\n\t\t\tconst payloads = this.pushPayloads.splice(\n\t\t\t\t0,\n\t\t\t\tthis.pushPayloads.length,\n\t\t\t);\n\t\t\t// If a client is waiting for a response, send all pending responses immediately\n\t\t\tthis.pushCallbacks.forEach((cb) => cb(payloads));\n\t\t\tthis.pushCallbacks.clear();\n\t\t} else {\n\t\t\t// otherwise start a timer so we can expire the payloads after a while\n\t\t\tif (!this.pushPayloadExpirationTimeout) {\n\t\t\t\tthis.pushPayloadExpirationTimeout = setTimeout(() => {\n\t\t\t\t\t// console.warn(\"push timeout expired\");\n\t\t\t\t\tthis.pushPayloads.splice(0, this.pushPayloads.length);\n\t\t\t\t}, 2500);\n\t\t\t}\n\t\t}\n\t\tthis.pushToFrontendBusy = false;\n\t}\n\n\tprivate logTransport: JSONTransport | undefined;\n\n\t// The promise returned to zwave-js that is resolved when the UI calls \"validateDSK\"\n\tprivate validateDSKPromise: DeferredPromise<string | false> | undefined;\n\n\t// The promise returned to zwave-js that is resolved when the UI calls \"grantSecurityClasses\"\n\tprivate grantSecurityClassesPromise:\n\t\t| DeferredPromise<InclusionGrant | false>\n\t\t| undefined;\n\n\t/**\n\t * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t * Using this method requires \"common.message\" property to be set to true in io-package.json\n\t */\n\tprivate async onMessage(obj: ioBroker.Message): Promise<void> {\n\t\t// responds to the adapter that sent the original message\n\t\tconst respond = (response: any): void => {\n\t\t\tif (obj.callback)\n\t\t\t\tthis.sendTo(obj.from, obj.command, response, obj.callback);\n\t\t};\n\t\t// some predefined responses so we only have to define them once\n\t\tconst responses = {\n\t\t\tACK: { error: null },\n\t\t\tOK: { error: null, result: \"ok\" },\n\t\t\tERROR_UNKNOWN_COMMAND: { error: \"Unknown command!\" },\n\t\t\tMISSING_PARAMETER: (paramName: string) => {\n\t\t\t\treturn { error: 'missing parameter \"' + paramName + '\"!' };\n\t\t\t},\n\t\t\tCOMMAND_ACTIVE: { error: \"command already active\" },\n\t\t\tRESULT: (result: unknown) => ({ error: null, result }),\n\t\t\tERROR: (error: string) => ({ error }),\n\t\t};\n\n\t\tfunction requireParams(...params: string[]): boolean {\n\t\t\tif (!params.length) return true;\n\t\t\tfor (const param of params) {\n\t\t\t\tif (!(obj.message && obj.message.hasOwnProperty(param))) {\n\t\t\t\t\trespond(responses.MISSING_PARAMETER(param));\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (obj) {\n\t\t\tswitch (obj.command) {\n\t\t\t\tcase \"getNetworkMap\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to show the network map!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst tasks = [\n\t\t\t\t\t\t...this.driver.controller.nodes.values(),\n\t\t\t\t\t].map(async (node) => ({\n\t\t\t\t\t\tid: node.id,\n\t\t\t\t\t\tname: `Node ${node.id}`,\n\t\t\t\t\t\tneighbors:\n\t\t\t\t\t\t\tawait this.driver.controller.getNodeNeighbors(\n\t\t\t\t\t\t\t\tnode.id,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t}));\n\t\t\t\t\tconst map = await Promise.all(tasks);\n\t\t\t\t\trespond(responses.RESULT(map));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"getSerialPorts\": {\n\t\t\t\t\tconst ports = await enumerateSerialPorts(this);\n\t\t\t\t\trespond(responses.RESULT(ports));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"registerPushCallback\": {\n\t\t\t\t\tif (!requireParams(\"uuid\")) return;\n\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\t\t\t\t\tconst clearPending = !!params.clearPending;\n\n\t\t\t\t\tif (clearPending) {\n\t\t\t\t\t\tthis.pushPayloads.splice(0, this.pushPayloads.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.pushPayloads.length) {\n\t\t\t\t\t\t// If we've previously stored a payload, this is the only client asking for a callback\n\t\t\t\t\t\t// Send it the response immediately\n\t\t\t\t\t\trespond(responses.RESULT(this.pushPayloads));\n\t\t\t\t\t\tthis.pushPayloads.splice(0, this.pushPayloads.length);\n\t\t\t\t\t\tif (this.pushPayloadExpirationTimeout)\n\t\t\t\t\t\t\tclearTimeout(this.pushPayloadExpirationTimeout);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// otherwise remember the callback for a later response\n\t\t\t\t\t\tthis.pushCallbacks.set(params.uuid, (result) =>\n\t\t\t\t\t\t\trespond(responses.RESULT(result)),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"supportsSmartStart\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to answer that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tconst supportsSmartStart =\n\t\t\t\t\t\t!!this.driver.controller.supportsFeature(\n\t\t\t\t\t\t\tZWaveFeature.SmartStart,\n\t\t\t\t\t\t);\n\n\t\t\t\t\treturn respond(responses.RESULT(supportsSmartStart));\n\t\t\t\t}\n\n\t\t\t\tcase \"scanQRCode\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!requireParams(\"code\")) return;\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\t\t\t\t\tconst code = params.code as string;\n\t\t\t\t\tconst include = !!params.include;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst provisioning = parseQRCodeString(code);\n\t\t\t\t\t\tconst node = this.driver.controller.getNodeByDSK(\n\t\t\t\t\t\t\tprovisioning.dsk,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst supportsSmartStart =\n\t\t\t\t\t\t\t!!this.driver.controller.supportsFeature(\n\t\t\t\t\t\t\t\tZWaveFeature.SmartStart,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (include && node) {\n\t\t\t\t\t\t\t// Only respond with \"already included\" when the node should be included\n\t\t\t\t\t\t\t// Otherwise the entry should be added to the provisioning list\n\t\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\t\tresponses.RESULT({\n\t\t\t\t\t\t\t\t\ttype: \"included\",\n\t\t\t\t\t\t\t\t\tnodeId: node.id,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tsupportsSmartStart &&\n\t\t\t\t\t\t\tthis.driver.controller.getProvisioningEntry(\n\t\t\t\t\t\t\t\tprovisioning.dsk,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\t\tresponses.RESULT({\n\t\t\t\t\t\t\t\t\ttype: \"provisioned\",\n\t\t\t\t\t\t\t\t\t...provisioning,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t!supportsSmartStart ||\n\t\t\t\t\t\t\tprovisioning.version === QRCodeVersion.S2\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (!include) {\n\t\t\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\t\t\tresponses.RESULT({ type: \"S2\" }),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Include S2 node via pre-provisioning info\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\t\t\tawait this.driver.controller.beginInclusion(\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tstrategy:\n\t\t\t\t\t\t\t\t\t\t\t\tInclusionStrategy.Security_S2,\n\t\t\t\t\t\t\t\t\t\t\tprovisioning,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tthis.setState(\"info.inclusion\", true, true);\n\n\t\t\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\t\t\t\tresponses.RESULT({ type: \"S2\" }),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\trespond(responses.COMMAND_ACTIVE);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\trespond(responses.ERROR(getErrorMessage(e)));\n\t\t\t\t\t\t\t\tthis.setState(\"info.inclusion\", false, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tprovisioning.version === QRCodeVersion.SmartStart\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (!include) {\n\t\t\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\t\t\tresponses.RESULT({\n\t\t\t\t\t\t\t\t\t\ttype: \"SmartStart\",\n\t\t\t\t\t\t\t\t\t\t...provisioning,\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Add node to provisioning list\n\t\t\t\t\t\t\tthis.driver.controller.provisionSmartStartNode(\n\t\t\t\t\t\t\t\tprovisioning,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\t\tresponses.RESULT({\n\t\t\t\t\t\t\t\t\ttype: \"SmartStart\",\n\t\t\t\t\t\t\t\t\t...provisioning,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t\t// Not a valid QR code\n\t\t\t\t\treturn respond(responses.RESULT({ type: \"none\" }));\n\t\t\t\t}\n\n\t\t\t\tcase \"provisionSmartStartNode\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!requireParams(\"dsk\", \"securityClasses\")) return;\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\t\t\t\t\tconst status = params.status as ProvisioningEntryStatus;\n\t\t\t\t\tconst dsk = params.dsk as string;\n\t\t\t\t\tconst securityClasses =\n\t\t\t\t\t\tparams.securityClasses as SecurityClass[];\n\t\t\t\t\tconst additionalInfo: Record<string, any> =\n\t\t\t\t\t\tparams.additionalInfo ?? {};\n\t\t\t\t\tif (\"status\" in additionalInfo)\n\t\t\t\t\t\tdelete additionalInfo.status;\n\t\t\t\t\tif (\"dsk\" in additionalInfo) delete additionalInfo.dsk;\n\t\t\t\t\tif (\"securityClasses\" in additionalInfo)\n\t\t\t\t\t\tdelete additionalInfo.securityClasses;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.driver.controller.provisionSmartStartNode({\n\t\t\t\t\t\t\tstatus,\n\t\t\t\t\t\t\tdsk,\n\t\t\t\t\t\t\tsecurityClasses,\n\t\t\t\t\t\t\t...additionalInfo,\n\t\t\t\t\t\t});\n\t\t\t\t\t\trespond(responses.OK);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\trespond(responses.ERROR(getErrorMessage(e)));\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"unprovisionSmartStartNode\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!requireParams(\"dsk\")) return;\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\t\t\t\t\tconst dsk = params.dsk as string;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.driver.controller.unprovisionSmartStartNode(dsk);\n\t\t\t\t\t\trespond(responses.OK);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\trespond(responses.ERROR(getErrorMessage(e)));\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"getProvisioningEntries\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tconst result =\n\t\t\t\t\t\tthis.driver.controller.getProvisioningEntries();\n\t\t\t\t\t// Look up each device if we have the information from the provisioning entry\n\t\t\t\t\tfor (const entry of result) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof entry.manufacturerId === \"number\" &&\n\t\t\t\t\t\t\ttypeof entry.productType === \"number\" &&\n\t\t\t\t\t\t\ttypeof entry.productId === \"number\" &&\n\t\t\t\t\t\t\ttypeof entry.applicationVersion === \"string\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst device =\n\t\t\t\t\t\t\t\tawait this.driver.configManager.lookupDevice(\n\t\t\t\t\t\t\t\t\tentry.manufacturerId,\n\t\t\t\t\t\t\t\t\tentry.productType,\n\t\t\t\t\t\t\t\t\tentry.productId,\n\t\t\t\t\t\t\t\t\tentry.applicationVersion,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (device) {\n\t\t\t\t\t\t\t\tentry.manufacturer = device.manufacturer;\n\t\t\t\t\t\t\t\tentry.label = device.label;\n\t\t\t\t\t\t\t\tentry.description = device.description;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn respond(responses.RESULT(result));\n\t\t\t\t}\n\n\t\t\t\tcase \"beginInclusion\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to include devices!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!requireParams(\"strategy\")) return;\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\t\t\t\t\tconst strategy = params.strategy as InclusionStrategy;\n\t\t\t\t\tconst forceSecurity = !!params.forceSecurity;\n\n\t\t\t\t\tthis.validateDSKPromise = undefined;\n\t\t\t\t\tthis.grantSecurityClassesPromise = undefined;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\tawait this.driver.controller.beginInclusion({\n\t\t\t\t\t\t\t\tstrategy: strategy as any,\n\t\t\t\t\t\t\t\tforceSecurity,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.setState(\"info.inclusion\", true, true);\n\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\trespond(responses.OK);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trespond(responses.COMMAND_ACTIVE);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\trespond(responses.ERROR(getErrorMessage(e)));\n\t\t\t\t\t\tthis.setState(\"info.inclusion\", false, true);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"validateDSK\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to include devices!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!requireParams(\"pin\")) return;\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\t\t\t\t\tconst pin: string = params.pin;\n\n\t\t\t\t\tif (!pin) {\n\t\t\t\t\t\tthis.validateDSKPromise?.resolve(false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.validateDSKPromise?.resolve(pin);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.pushToFrontend({\n\t\t\t\t\t\ttype: \"inclusion\",\n\t\t\t\t\t\tstatus: { type: \"busy\" },\n\t\t\t\t\t});\n\n\t\t\t\t\trespond(responses.ACK);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"grantSecurityClasses\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to include devices!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!requireParams(\"grant\")) return;\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\t\t\t\t\tconst grant = params.grant as InclusionGrant | false;\n\n\t\t\t\t\tthis.grantSecurityClassesPromise?.resolve(grant);\n\n\t\t\t\t\tthis.pushToFrontend({\n\t\t\t\t\t\ttype: \"inclusion\",\n\t\t\t\t\t\tstatus: { type: \"busy\" },\n\t\t\t\t\t});\n\n\t\t\t\t\trespond(responses.ACK);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"stopInclusion\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to include devices!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = await this.driver.controller.stopInclusion();\n\t\t\t\t\tthis.setState(\"info.inclusion\", false, true);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\trespond(responses.OK);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trespond(responses.COMMAND_ACTIVE);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"beginHealingNetwork\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to heal the network!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = this.driver.controller.beginHealingNetwork();\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\trespond(responses.OK);\n\t\t\t\t\t\tthis.setState(\"info.healingNetwork\", true, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trespond(responses.COMMAND_ACTIVE);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"stopHealingNetwork\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to heal the network!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.driver.controller.stopHealingNetwork();\n\t\t\t\t\trespond(responses.OK);\n\t\t\t\t\tthis.setState(\"info.healingNetwork\", false, true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"softReset\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\"The driver is not yet ready!\"),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.driver.softReset();\n\t\t\t\t\t\trespond(responses.OK);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\trespond(responses.ERROR(getErrorMessage(e)));\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"hardReset\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\"The driver is not yet ready!\"),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.driver.hardReset();\n\t\t\t\t\t\trespond(responses.OK);\n\t\t\t\t\t\tthis.restart();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\trespond(responses.ERROR(getErrorMessage(e)));\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"clearCache\": {\n\t\t\t\t\tthis.updateConfig({ clearCache: true });\n\t\t\t\t\trespond(responses.OK);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"removeFailedNode\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!requireParams(\"nodeId\")) return;\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.driver.controller.removeFailedNode(\n\t\t\t\t\t\t\tparams.nodeId,\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t`Could not remove node ${\n\t\t\t\t\t\t\t\t\tparams.nodeId\n\t\t\t\t\t\t\t\t}: ${getErrorMessage(e)}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn respond(responses.OK);\n\t\t\t\t}\n\n\t\t\t\tcase \"replaceFailedNode\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to replace devices!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!requireParams(\"nodeId\", \"strategy\")) return;\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\t\t\t\t\tconst strategy = params.strategy as InclusionStrategy;\n\n\t\t\t\t\tthis.validateDSKPromise = undefined;\n\t\t\t\t\tthis.grantSecurityClassesPromise = undefined;\n\n\t\t\t\t\tconst userCallbacks: InclusionUserCallbacks = {\n\t\t\t\t\t\tvalidateDSKAndEnterPIN: (dsk) => {\n\t\t\t\t\t\t\tthis.validateDSKPromise = createDeferredPromise();\n\t\t\t\t\t\t\tthis.pushToFrontend({\n\t\t\t\t\t\t\t\ttype: \"inclusion\",\n\t\t\t\t\t\t\t\tstatus: {\n\t\t\t\t\t\t\t\t\ttype: \"validateDSK\",\n\t\t\t\t\t\t\t\t\tdsk,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn this.validateDSKPromise;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgrantSecurityClasses: (grant) => {\n\t\t\t\t\t\t\tthis.grantSecurityClassesPromise =\n\t\t\t\t\t\t\t\tcreateDeferredPromise();\n\t\t\t\t\t\t\tthis.pushToFrontend({\n\t\t\t\t\t\t\t\ttype: \"inclusion\",\n\t\t\t\t\t\t\t\tstatus: {\n\t\t\t\t\t\t\t\t\ttype: \"grantSecurityClasses\",\n\t\t\t\t\t\t\t\t\trequest: grant,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn this.grantSecurityClassesPromise;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tabort: () => {\n\t\t\t\t\t\t\t// TODO\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\tawait this.driver.controller.replaceFailedNode(\n\t\t\t\t\t\t\t\tparams.nodeId,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstrategy: strategy as any,\n\t\t\t\t\t\t\t\t\tuserCallbacks,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.setState(\"info.inclusion\", true, true);\n\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\trespond(responses.OK);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trespond(responses.COMMAND_ACTIVE);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\trespond(responses.ERROR(getErrorMessage(e)));\n\t\t\t\t\t\tthis.setState(\"info.inclusion\", false, true);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcase \"setRFRegion\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!requireParams(\"region\")) return;\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.driver.controller.setRFRegion(params.region);\n\t\t\t\t\t\tawait setRFRegionState(params.region);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t`Could not set region to ${getEnumMemberName(\n\t\t\t\t\t\t\t\t\tRFRegion,\n\t\t\t\t\t\t\t\t\tparams.region,\n\t\t\t\t\t\t\t\t)}: ${getErrorMessage(e)}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn respond(responses.OK);\n\t\t\t\t}\n\n\t\t\t\tcase \"getEndpointIndizes\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!requireParams(\"nodeId\")) return;\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst node = this.driver.controller.nodes.getOrThrow(\n\t\t\t\t\t\t\tparams.nodeId,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst ret = node.getEndpointIndizes();\n\t\t\t\t\t\treturn respond(responses.RESULT(ret));\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t`Could not get endpoint indizes for node ${\n\t\t\t\t\t\t\t\t\tparams.nodeId\n\t\t\t\t\t\t\t\t}: ${getErrorMessage(e)}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcase \"getAssociationGroups\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!requireParams(\"source\")) return;\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\t\t\t\t\tconst source: AssociationAddress = params.source;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst groups =\n\t\t\t\t\t\t\tthis.driver.controller.getAssociationGroups(source);\n\t\t\t\t\t\t// convert map into object\n\t\t\t\t\t\tconst ret = composeObject([...groups] as [\n\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\tAssociationGroup,\n\t\t\t\t\t\t][]);\n\t\t\t\t\t\treturn respond(responses.RESULT(ret));\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t`Could not get association groups for node ${\n\t\t\t\t\t\t\t\t\tparams.nodeId\n\t\t\t\t\t\t\t\t}: ${getErrorMessage(e)}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcase \"getAssociations\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!requireParams(\"source\")) return;\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\t\t\t\t\tconst source: AssociationAddress = params.source;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst assocs =\n\t\t\t\t\t\t\tthis.driver.controller.getAssociations(source);\n\t\t\t\t\t\t// convert map into object\n\t\t\t\t\t\tconst ret = composeObject([...assocs] as [\n\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\tAssociationAddress[],\n\t\t\t\t\t\t][]);\n\t\t\t\t\t\treturn respond(responses.RESULT(ret));\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t`Could not get associations for node ${\n\t\t\t\t\t\t\t\t\tparams.nodeId\n\t\t\t\t\t\t\t\t}: ${getErrorMessage(e)}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcase \"addAssociation\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!requireParams(\"nodeId\", \"association\")) return;\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\t\t\t\t\tconst nodeId: number = params.nodeId;\n\t\t\t\t\tconst definition: AssociationDefinition =\n\t\t\t\t\t\tparams.association;\n\n\t\t\t\t\tconst source: AssociationAddress = {\n\t\t\t\t\t\tnodeId,\n\t\t\t\t\t\tendpoint: definition.sourceEndpoint,\n\t\t\t\t\t};\n\t\t\t\t\tconst target: AssociationAddress = {\n\t\t\t\t\t\tnodeId: definition.nodeId,\n\t\t\t\t\t\tendpoint: definition.endpoint,\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.driver.controller.addAssociations(\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\tdefinition.group,\n\t\t\t\t\t\t\t[target],\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn respond(responses.OK);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t`Could not add association for node ${\n\t\t\t\t\t\t\t\t\tparams.nodeId\n\t\t\t\t\t\t\t\t}: ${getErrorMessage(e)}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcase \"removeAssociation\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!requireParams(\"nodeId\", \"association\")) return;\n\t\t\t\t\tconst params = obj.message as any as Record<string, any>;\n\t\t\t\t\tconst nodeId: number = params.nodeId;\n\t\t\t\t\tconst definition: AssociationDefinition =\n\t\t\t\t\t\tparams.association;\n\n\t\t\t\t\tconst source: AssociationAddress = {\n\t\t\t\t\t\tnodeId,\n\t\t\t\t\t\tendpoint: definition.sourceEndpoint,\n\t\t\t\t\t};\n\t\t\t\t\tconst target: AssociationAddress = {\n\t\t\t\t\t\tnodeId: definition.nodeId,\n\t\t\t\t\t\tendpoint: definition.endpoint,\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.driver.controller.removeAssociations(\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\tdefinition.group,\n\t\t\t\t\t\t\t[target],\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn respond(responses.OK);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t`Could not remove association for node ${\n\t\t\t\t\t\t\t\t\tparams.nodeId\n\t\t\t\t\t\t\t\t}: ${getErrorMessage(e)}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcase \"refreshNodeInfo\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!requireParams(\"nodeId\")) return;\n\t\t\t\t\tconst { nodeId } = obj.message as any;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.driver.controller.nodes\n\t\t\t\t\t\t\t.get(nodeId)!\n\t\t\t\t\t\t\t.refreshInfo();\n\t\t\t\t\t\tthis.readyNodes.delete(nodeId);\n\t\t\t\t\t\tthis.log.info(`Node ${nodeId}: interview restarted`);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t`Could not refresh info for node ${nodeId}: ${getErrorMessage(\n\t\t\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn respond(responses.OK);\n\t\t\t\t}\n\n\t\t\t\tcase \"beginFirmwareUpdate\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!requireParams(\"nodeId\", \"filename\", \"firmware\"))\n\t\t\t\t\t\treturn;\n\t\t\t\t\tconst { nodeId, filename, firmware } = obj.message as any;\n\t\t\t\t\tif (\n\t\t\t\t\t\tisArray(firmware) &&\n\t\t\t\t\t\tfirmware.every(\n\t\t\t\t\t\t\t(byte: unknown) => typeof byte === \"number\",\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Extract the firmware from the uploaded file\n\t\t\t\t\t\tconst rawData = Buffer.from(firmware);\n\t\t\t\t\t\tlet actualFirmware: Firmware;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst format = guessFirmwareFileFormat(\n\t\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\t\trawData,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tactualFirmware = extractFirmware(rawData, format);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\treturn respond(responses.ERROR(getErrorMessage(e)));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// And try to start the update\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.driver.controller.nodes\n\t\t\t\t\t\t\t\t.get(nodeId)!\n\t\t\t\t\t\t\t\t.beginFirmwareUpdate(\n\t\t\t\t\t\t\t\t\tactualFirmware.data,\n\t\t\t\t\t\t\t\t\tactualFirmware.firmwareTarget,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.log.info(\n\t\t\t\t\t\t\t\t`Node ${nodeId}: Firmware update started`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn respond(responses.OK);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\te instanceof ZWaveError &&\n\t\t\t\t\t\t\t\te.code === ZWaveErrorCodes.FirmwareUpdateCC_Busy\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn respond(responses.COMMAND_ACTIVE);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\t\t\tresponses.ERROR(getErrorMessage(e)),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\"The firmware data is invalid!\"),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcase \"abortFirmwareUpdate\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!requireParams(\"nodeId\")) return;\n\t\t\t\t\tconst { nodeId } = obj.message as any;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.driver.controller.nodes\n\t\t\t\t\t\t\t.get(nodeId)!\n\t\t\t\t\t\t\t.abortFirmwareUpdate();\n\t\t\t\t\t\tthis.log.info(\n\t\t\t\t\t\t\t`Node ${nodeId}: Firmware update aborted`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn respond(responses.OK);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn respond(responses.ERROR(getErrorMessage(e)));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcase \"updateConfig\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.setStateAsync(\n\t\t\t\t\t\t\t\"info.configUpdating\",\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst result = await this.driver.installConfigUpdate();\n\t\t\t\t\t\tawait this.setStateAsync(\n\t\t\t\t\t\t\t\"info.configUpdate\",\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait this.setStateAsync(\n\t\t\t\t\t\t\t\"info.configVersion\",\n\t\t\t\t\t\t\tthis.driver.configVersion,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn respond(responses.RESULT(result));\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tthis.log.error(\n\t\t\t\t\t\t\t`Could not install config updates: ${getErrorMessage(\n\t\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t`Could not install config updates: ${getErrorMessage(\n\t\t\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tawait this.setStateAsync(\n\t\t\t\t\t\t\t\"info.configUpdating\",\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcase \"sendCommand\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check that we got the params we need\n\t\t\t\t\tif (!requireParams(\"nodeId\", \"commandClass\", \"command\"))\n\t\t\t\t\t\treturn;\n\t\t\t\t\tconst {\n\t\t\t\t\t\tnodeId,\n\t\t\t\t\t\tendpoint: endpointIndex,\n\t\t\t\t\t\tcommandClass,\n\t\t\t\t\t\tcommand,\n\t\t\t\t\t\targs,\n\t\t\t\t\t} = obj.message as any;\n\t\t\t\t\tif (typeof nodeId !== \"number\") {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(`nodeId must be a number`),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (endpointIndex != undefined) {\n\t\t\t\t\t\tif (typeof endpointIndex !== \"number\") {\n\t\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\t`If an endpoint is given, it must be a number!`,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (endpointIndex < 0) {\n\t\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\t`The endpoint must not be negative!`,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof commandClass !== \"string\" &&\n\t\t\t\t\t\ttypeof commandClass !== \"number\"\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t`commandClass must be a string or number`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (typeof command !== \"string\") {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(`command must be a string`),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (args != undefined && !isArray(args)) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t`if args is given, it must be an array`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst node = this.driver.controller.nodes.get(nodeId);\n\t\t\t\t\tif (!node) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(`Node ${nodeId} was not found!`),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tconst endpoint = node.getEndpoint(endpointIndex ?? 0);\n\t\t\t\t\tif (!endpoint) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t`Endpoint ${endpointIndex} does not exist on Node ${nodeId}!`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tlet api: CCAPI;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tapi = (endpoint.commandClasses as any)[commandClass];\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn respond(responses.ERROR(getErrorMessage(e)));\n\t\t\t\t\t}\n\t\t\t\t\tif (!api.isSupported()) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t`Node ${nodeId} (Endpoint ${endpointIndex}) does not support CC ${commandClass}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (!(command in api)) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t`The command ${command} does not exist for CC ${commandClass}`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst method = (api as any)[command].bind(api);\n\t\t\t\t\t\tconst result = args\n\t\t\t\t\t\t\t? await method(...args)\n\t\t\t\t\t\t\t: await method();\n\t\t\t\t\t\treturn respond(responses.RESULT(result));\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn respond(responses.ERROR(getErrorMessage(e)));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcase \"subscribeLogs\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (!this.logTransport) {\n\t\t\t\t\t\tthis.logTransport = new JSONTransport();\n\t\t\t\t\t\tthis.logTransport.format = createDefaultTransportFormat(\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tthis.driver.updateLogConfig({\n\t\t\t\t\t\t\ttransports: [this.logTransport],\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.logTransport.stream.on(\"data\", (data) => {\n\t\t\t\t\t\t\tthis.pushToFrontend({\n\t\t\t\t\t\t\t\ttype: \"log\",\n\t\t\t\t\t\t\t\tinfo: data,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn respond(responses.OK);\n\t\t\t\t}\n\n\t\t\t\tcase \"unsubscribeLogs\": {\n\t\t\t\t\tif (!this.driverReady) {\n\t\t\t\t\t\treturn respond(\n\t\t\t\t\t\t\tresponses.ERROR(\n\t\t\t\t\t\t\t\t\"The driver is not yet ready to do that!\",\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (this.logTransport) {\n\t\t\t\t\t\tthis.driver.updateLogConfig({\n\t\t\t\t\t\t\ttransports: [],\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.logTransport.close();\n\t\t\t\t\t\tthis.logTransport = undefined;\n\t\t\t\t\t}\n\t\t\t\t\treturn respond(responses.OK);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nif (module.parent) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) =>\n\t\tnew ZWave2(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new ZWave2())();\n}\n\nprocess.on(\"unhandledRejection\", (r) => {\n\tthrow r;\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,YAAuB;AACvB,kBAOO;AACP,gCAA8B;AAC9B,oBAAkC;AAClC,8BAGO;AACP,qBAA8B;AAC9B,wBAAwB;AACxB,sBAAe;AACf,kBAAiB;AAajB,sBASO;AACP,wBAWO;AACP,mBAAkD;AASlD,oBAA4B;AAC5B,sBAuBO;AACP,yBAAqC;AACrC,qBAQO;AAEP,MAAM,eAAe,MAAM,QAAc;AAAA,EACxC,AAAO,YAAY,UAAyC,CAAC,GAAG;AAC/D,UAAM,iCACF,UADE;AAAA,MAEL,MAAM;AAAA,MACN,SAAS;AAAA,IACV,EAAC;AASF,SAAQ,cAAc;AACtB,SAAQ,aAAa,oBAAI,IAAY;AACrC,SAAQ,sBAAsB;AAC9B,SAAQ,6BAA6B,oBAAI,IAA4B;AA06BrE,SAAQ,qBAAgD,UACpD,WACC;AACJ,UAAI,OAAO,OAAO,2BAAe,cAAc;AAC9C,cAAM,CAAC,MAAM,EAAE,QAAQ;AACvB,aAAK,IAAI,MACR,QAAQ,KAAK,8BAA8B,KAAK,WAAW,KAAK,YACjE;AACA,cAAM,uDAAkC,MAAM,IAAI;AAAA,MACnD;AAAA,IACD;AAoOA,SAAQ,eAA8B,CAAC;AAEvC,SAAQ,gBAAgB,oBAAI,IAA8C;AAG1E,SAAQ,qBAAqB;AAxqC5B,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,gBAAgB,KAAK,eAAe,KAAK,IAAI,CAAC;AACtD,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAC5C,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC3C;AAAA,EAYA,MAAc,UAAyB;AAEtC,yBAAE,UAAU;AAGZ,UAAM,WAAW,oBAAK,KACrB,MAAM,2BAA2B,IAAI,GACrC,OACD;AACA,QAAI,CAAC,CAAC,KAAK,OAAO,YAAY;AAE7B,YAAM,wBAAG,OAAO,QAAQ;AAExB,WAAK,aAAa,EAAE,YAAY,MAAM,CAAC;AACvC;AAAA,IACD;AAEA,UAAM,KAAK,qBAAqB,GAAG;AAGnC,SAAK,SAAS,mBAAmB,OAAO,IAAI;AAC5C,SAAK,SAAS,kBAAkB,OAAO,IAAI;AAC3C,SAAK,SAAS,kBAAkB,OAAO,IAAI;AAC3C,SAAK,SAAS,uBAAuB,OAAO,IAAI;AAEhD,QAAI,CAAC,KAAK,OAAO,YAAY;AAC5B,WAAK,IAAI,KACR,uEACD;AACA;AAAA,IACD;AAGA,UAAM,WAA0D,KAC9D,OAAO,0BACN,EAAE,KAAK,IAAK,IACZ;AACH,UAAM,WAA0D,KAC9D,OAAO,8BACN,EAAE,UAAU,EAAE,IACd;AAEH,UAAM,eAA6C,CAAC;AACpD,UAAM,YAAY,KAAK,OAAO,cAAc,KAAK,OAAO;AACxD,QAAI,OAAO,cAAc,YAAY,UAAU,WAAW,IAAI;AAC7D,mBAAa,YAAY,OAAO,KAAK,WAAW,KAAK;AAAA,IACtD;AACA,eAAW,YAAY;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,IACD,GAAY;AACX,YAAM,MAAM,KAAK,OAAO,cAAc;AACtC,UAAI,OAAO,QAAQ,YAAY,IAAI,WAAW,IAAI;AACjD,qBAAa,YAAY,OAAO,KAAK,KAAK,KAAK;AAAA,MAChD;AAAA,IACD;AAEA,SAAK,SAAS,IAAI,uBAAO,KAAK,OAAO,YAAY;AAAA,MAChD;AAAA,MACA;AAAA,MACA,WAAW;AAAA,QACV,WAAW,CAAC,CAAC,KAAK,OAAO;AAAA,MAC1B;AAAA,MACA,SAAS;AAAA,QACR;AAAA,MACD;AAAA,MACA;AAAA,MACA,WAAW;AAAA,QAEV,mBAAmB;AAAA,MACpB;AAAA,MACA,iBAAiB,CAAC,KAAK,OAAO;AAAA,MAC9B,wBAAwB;AAAA,QACvB,wBAAwB,CAAC,QAAgB;AACxC,eAAK,qBAAqB,mDAAsB;AAChD,eAAK,eAAe;AAAA,YACnB,MAAM;AAAA,YACN,QAAQ;AAAA,cACP,MAAM;AAAA,cACN;AAAA,YACD;AAAA,UACD,CAAC;AACD,iBAAO,KAAK;AAAA,QACb;AAAA,QACA,sBAAsB,CAAC,UAA0B;AAChD,eAAK,8BAA8B,mDAAsB;AACzD,eAAK,eAAe;AAAA,YACnB,MAAM;AAAA,YACN,QAAQ;AAAA,cACP,MAAM;AAAA,cACN,SAAS;AAAA,YACV;AAAA,UACD,CAAC;AACD,iBAAO,KAAK;AAAA,QACb;AAAA,QACA,OAAO,MAAM;AAAA,QAEb;AAAA,MACD;AAAA,IACD,CAAC;AAED,SAAK,OAAO,KAAK,gBAAgB,YAAY;AAC5C,WAAK,cAAc;AACnB,WAAK,SAAS,mBAAmB,MAAM,IAAI;AAE3C,WAAK,IAAI,KACR,8BAA8B,KAAK,OAAO,WAAW,MAAM,aAC5D;AACA,WAAK,OAAO,WACV,GAAG,qBAAqB,KAAK,mBAAmB,KAAK,IAAI,CAAC,EAC1D,GAAG,qBAAqB,KAAK,mBAAmB,KAAK,IAAI,CAAC,EAC1D,GAAG,qBAAqB,KAAK,mBAAmB,KAAK,IAAI,CAAC,EAC1D,GAAG,qBAAqB,KAAK,mBAAmB,KAAK,IAAI,CAAC,EAC1D,GAAG,oBAAoB,KAAK,kBAAkB,KAAK,IAAI,CAAC,EACxD,GAAG,oBAAoB,KAAK,kBAAkB,KAAK,IAAI,CAAC,EACxD,GAAG,cAAc,KAAK,YAAY,KAAK,IAAI,CAAC,EAC5C,GAAG,gBAAgB,KAAK,cAAc,KAAK,IAAI,CAAC,EAChD,GACA,yBACA,KAAK,sBAAsB,KAAK,IAAI,CACrC,EACC,GAAG,qBAAqB,KAAK,kBAAkB,KAAK,IAAI,CAAC,EACzD,GACA,sBACA,KAAK,8BAA8B,KAAK,IAAI,CAC7C;AAGD,YAAM,KAAK,cACV,sBACA,KAAK,OAAO,eACZ,IACD;AACA,YAAM,KAAK,cAAc,qBAAqB,MAAM,IAAI;AACxD,WAAK,KAAK,sBAAsB;AAGhC,UAAI;AACH,cAAM,WAAW,MAAM,KAAK,OAAO,WAAW,YAAY;AAC1D,cAAM,sCAAiB,QAAQ;AAAA,MAChC,QAAE;AACD,cAAM,sCAAiB,MAAS;AAAA,MACjC;AAGA,WAAK,6BAA6B,IAAI,IACrC,CAAC,GAAG,KAAK,OAAO,WAAW,MAAM,OAAO,CAAC,EAAE,IAAI,CAAC,SAAS;AAAA,QACxD,KAAK;AAAA,QACL,KAAK;AAAA,MACN,CAAC,CACF;AAEA,iBAAW,CAAC,QAAQ,SAAS,KAAK,OAAO,WAAW,OAAO;AAE1D,cAAM,mCACL,QACA,6CAAwB,KAAK,MAAM,CACpC;AACA,cAAM,kCAAa,QAAQ,KAAK,KAAK;AACrC,aAAK,qBAAqB,IAAI;AAE9B,YAAI,KAAK,OAAO;AAEf,eAAK,KAAK,YAAY,IAAI;AAAA,QAC3B,OAAO;AAGN,gBAAM,KAAK,2BAA2B,IAAI;AAAA,QAC3C;AAAA,MACD;AAGA,YAAM,cAAc,IAAI,OACvB,IAAI,KAAK,UAAU,KAAK,wBACzB;AACA,YAAM,kBACL,OAAO,KACN,MAAM,qBAAE,GAAG,GAAG,KAAK,eAAe,EAAE,MAAM,SAAS,CAAC,CACrD,EACE,IAAI,CAAC,OAAY;AA9SvB;AA8S0B,wBAAG,MAAM,WAAW,MAApB,mBAAwB;AAAA,OAAE,EAC9C,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,EAEpB,IAAI,CAAC,OAAO,SAAS,IAAI,EAAE,CAAC,EAC5B,OAAO,CAAC,IAAI,OAAO,QAAQ,IAAI,QAAQ,EAAE,MAAM,KAAK;AACtD,YAAM,gBAAgB,gBAAgB,OACrC,CAAC,OAAO,CAAC,KAAK,OAAO,WAAW,MAAM,IAAI,EAAE,CAC7C;AACA,iBAAW,UAAU,eAAe;AACnC,aAAK,IAAI,KAAK,0BAA0B,QAAQ;AAChD,cAAM,gCAAW,MAAM;AAAA,MACxB;AAAA,IACD,CAAC;AAED,SAAK,OAAO,GAAG,SAAS,KAAK,aAAa,KAAK,IAAI,CAAC;AAEpD,SAAK,OAAO,KAAK,mBAAmB,YAAY;AAC/C,WAAK,IAAI,KAAK,4BAA4B;AAG1C,YAAM,KAAK,mBAAmB;AAAA,IAC/B,CAAC;AAGD,QAAI;AACH,WAAK,OAAO,iBAAiB;AAAA,QAC5B,iBAAiB;AAAA,QAEjB,oBAAoB,QAAQ,8BAA8B,EACxD;AAAA,MACH,CAAC;AAAA,IACF,QAAE;AAAA,IAEF;AAEA,SAAK,OAAO,qBAAqB;AAEjC,QAAI;AACH,YAAM,KAAK,OAAO,MAAM;AAAA,IACzB,SAAS,GAAP;AACD,WAAK,IAAI,MACR,2CAA2C,oCAAgB,CAAC,GAC7D;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,mBACb,SACA,UACgB;AAChB,SAAK,IAAI,KACR,gCAAgC,oCAAkB,YACnD;AACA,UAAM,KAAK,cAAc,kBAAkB,MAAM,IAAI;AAAA,EACtD;AAAA,EAEA,MAAc,qBAAoC;AACjD,SAAK,IAAI,KAAK,mBAAmB;AACjC,UAAM,KAAK,cAAc,kBAAkB,MAAM,IAAI;AAAA,EACtD;AAAA,EAEA,MAAc,qBAAoC;AACjD,SAAK,IAAI,KAAK,mBAAmB;AACjC,UAAM,KAAK,cAAc,kBAAkB,OAAO,IAAI;AAAA,EACvD;AAAA,EAEA,MAAc,qBAAoC;AACjD,SAAK,IAAI,KAAK,mBAAmB;AACjC,UAAM,KAAK,cAAc,kBAAkB,OAAO,IAAI;AAAA,EACvD;AAAA,EAEA,MAAc,oBAAmC;AAChD,SAAK,IAAI,KAAK,kBAAkB;AAChC,UAAM,KAAK,cAAc,kBAAkB,OAAO,IAAI;AAAA,EACvD;AAAA,EAEA,MAAc,oBAAmC;AAChD,SAAK,IAAI,KAAK,kBAAkB;AAChC,UAAM,KAAK,cAAc,kBAAkB,OAAO,IAAI;AAAA,EACvD;AAAA,EAEA,MAAc,YACb,MACA,QACgB;AAlYlB;AAmYE,SAAK,IAAI,KAAK,QAAQ,KAAK,WAAW;AAEtC,SAAK,sBAAsB;AAE3B,SAAK,qBAAqB,IAAI;AAC9B,SAAK,eAAe;AAAA,MACnB,MAAM;AAAA,MACN,QAAQ;AAAA,QACP,MAAM;AAAA,QACN,QAAQ,KAAK;AAAA,QACb,aAAa,CAAC,CAAC,OAAO;AAAA,QACtB,eACC,0BACC,WAAK,wBAAwB,MAA7B,YAAkC,0BAAc;AAAA,MAEnD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,cACb,MACA,UACgB;AAChB,QAAI,UAAU;AACb,WAAK,IAAI,KAAK,QAAQ,KAAK,qBAAqB;AAChD,WAAK,WAAW,OAAO,KAAK,EAAE;AAAA,IAC/B,OAAO;AACN,WAAK,IAAI,KAAK,QAAQ,KAAK,aAAa;AACxC,WAAK,eAAe;AAAA,QACnB,MAAM;AAAA,QACN,QAAQ;AAAA,UACP,MAAM;AAAA,UACN,QAAQ,KAAK;AAAA,QACd;AAAA,MACD,CAAC;AAAA,IACF;AACA,SAAK,mBAAmB;AACxB,UAAM,gCAAW,KAAK,EAAE;AAGxB,SAAK,sBAAsB;AAC3B,UAAM,KAAK,mBAAmB;AAAA,EAC/B;AAAA,EAEA,MAAc,sBACb,UACgB;AAChB,UAAM,UAAU,CAAC,GAAG,SAAS,OAAO,CAAC,EAAE,MAAM,CAAC,MAAM,MAAM,SAAS;AAEnE,QAAI;AAAS;AACb,SAAK,eAAe;AAAA,MACnB,MAAM;AAAA,MACN,QAAQ;AAAA,QACP,MAAM;AAAA,QACN,UAAU,gCAAY,QAAQ;AAAA,MAC/B;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,kBACb,QACgB;AAChB,SAAK,eAAe;AAAA,MACnB,MAAM;AAAA,MACN,QAAQ;AAAA,QACP,MAAM;AAAA,QACN,UAAU,gCAAY,MAAM;AAAA,MAC7B;AAAA,IACD,CAAC;AACD,SAAK,SAAS,uBAAuB,OAAO,IAAI;AAAA,EACjD;AAAA,EAEA,MAAc,8BACb,YACgB;AAChB,UAAM,6CAAwB,UAAU;AAAA,EACzC;AAAA,EAEA,AAAQ,qBAAqB,MAAuB;AACnD,SAAK,GAAG,SAAS,KAAK,YAAY,KAAK,IAAI,CAAC,EAC1C,GAAG,oBAAoB,KAAK,sBAAsB,KAAK,IAAI,CAAC,EAC5D,GAAG,uBAAuB,KAAK,yBAAyB,KAAK,IAAI,CAAC,EAClE,GAAG,WAAW,KAAK,aAAa,KAAK,IAAI,CAAC,EAC1C,GAAG,SAAS,KAAK,YAAY,KAAK,IAAI,CAAC,EACvC,GAAG,SAAS,KAAK,YAAY,KAAK,IAAI,CAAC,EACvC,GAAG,QAAQ,KAAK,WAAW,KAAK,IAAI,CAAC,EACrC,GAAG,eAAe,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAClD,GAAG,iBAAiB,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACtD,GAAG,iBAAiB,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACtD,GAAG,sBAAsB,KAAK,wBAAwB,KAAK,IAAI,CAAC,EAChE,GAAG,oBAAoB,KAAK,sBAAsB,KAAK,IAAI,CAAC,EAC5D,GACA,4BACA,KAAK,6BAA6B,KAAK,IAAI,CAC5C,EACC,GACA,4BACA,KAAK,6BAA6B,KAAK,IAAI,CAC5C,EACC,GAAG,gBAAgB,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACrD,GAAG,sBAAsB,KAAK,wBAAwB,KAAK,IAAI,CAAC;AAAA,EACnE;AAAA,EAEA,MAAc,YAAY,MAAgC;AAEzD,QAAI,KAAK,WAAW,IAAI,KAAK,EAAE;AAAG;AAClC,SAAK,WAAW,IAAI,KAAK,EAAE;AAE3B,SAAK,IAAI,KAAK,QAAQ,KAAK,kBAAkB;AAG7C,UAAM,mCACL,KAAK,IACL,KAAK,OAAO,KAAK,OAAO,WAAW,YAChC,UACA,6CAAwB,KAAK,MAAM,CACvC;AACA,UAAM,kCAAa,KAAK,IAAI,IAAI;AAEhC,UAAM,cAAc,KAAK,mBAAmB;AAC5C,UAAM,KAAK,2BAA2B,MAAM,WAAW;AAEvD,QAAI,CAAC,KAAK,kBAAkB;AAC3B,YAAM,KAAK,4BAA4B,MAAM,WAAW;AAAA,IACzD;AAGA,UAAM,KAAK,mBAAmB;AAAA,EAC/B;AAAA,EAEA,MAAc,qBAAoC;AAEjD,QAAI,KAAK;AAAqB;AAC9B,SAAK,sBAAsB;AAC3B,SAAK,IAAI,KAAK,0CAA0C;AAGxD,QAAI,OAAoB,KAAK,OAAO,WAAW,iBAAiB;AAChE,UAAM,cAAc,KAAK,mBAAmB;AAE5C,UAAM,yCAAoB;AAC1B,UAAM,KAAK,kCACV,MACA,qCACA,WACD;AACA,UAAM,KAAK,0BAA0B,qCAAqB,WAAW;AAGrE,UAAM,iBAAiB,MAAM,KAAK,4BAA4B;AAC9D,eAAW,EAAE,OAAO,aAAa,gBAAgB;AAChD,aAAO,KAAK,OAAO,WAAW,kBAC7B,QAAQ,OAAO,CAAC,MACf,KAAK,OAAO,WAAW,MAAM,IAAI,CAAC,CACnC,CACD;AACA,YAAM,eAAc,KAAK,mBAAmB;AAC5C,YAAM,WAAW,MAAM,OAAO,KAAK,UAAU,SAAS,CAAC;AACvD,YAAM,KAAK,kCACV,MACA,UACA,YACD;AACA,YAAM,KAAK,0BAA0B,UAAU,YAAW;AAAA,IAC3D;AAGA,UAAM,KAAK,kCACV,eAAe,IAAI,CAAC,MAAM,EAAE,KAAK,CAClC;AAAA,EACD;AAAA,EAEA,MAAc,8BAA8B;AAC3C,UAAM,UACL,OAAM,KAAK,mBAAmB,UAAU,UAAU;AAAA,MACjD,UAAU,GAAG,KAAK;AAAA,MAClB,QAAQ,GAAG,KAAK;AAAA,IACjB,CAAC,GACA,KACA,IAAI,CAAC,MAAM,EAAE,KAAK,EAClB,OAAO,CAAC,MAAkC,CAAC,CAAC,CAAC;AAE/C,UAAM,MAA8C,CAAC;AACrD,eAAW,KAAK,SAAS;AACxB,UAAI,CAAC,EAAE,OAAO;AAAW;AACzB,UAAI,CAAC,+BAAQ,EAAE,OAAO,OAAO,KAAK,CAAC,EAAE,OAAO,QAAQ,QAAQ;AAC3D;AAAA,MACD;AACA,UACC,CAAC,EAAE,OAAO,QAAQ,MACjB,CAAC,MACA,OAAO,MAAM,YAAY,IAAI,KAAK,KAAK,qBACzC,GACC;AACD,aAAK,IAAI,KACR,0BAA0B,EAAE,6CAC7B;AACA;AAAA,MACD;AAEA,YAAM,eAAgB,EAAE,OAAO,QAAqB,OACnD,CAAC,MAAM,CAAC,KAAK,OAAO,WAAW,MAAM,IAAI,CAAC,CAC3C;AACA,UAAI,aAAa,QAAQ;AACxB,aAAK,IAAI,KACR,mBACC,EAAE,gCAC0B,aAAa,KAAK,IAAI,IACpD;AAAA,MACD;AACA,UAAI,KAAK,EAAE,OAAO,EAAE,KAAK,SAAS,EAAE,OAAO,QAAQ,CAAC;AAAA,IACrD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAc,kCACb,mBACC;AACD,UAAM,YAAY;AAAA,MACjB,GACC,OAAM,KAAK,mBAAmB,UAAU,WAAW;AAAA,QAClD,UAAU,GAAG,KAAK;AAAA,QAClB,QAAQ,GAAG,KAAK;AAAA,MACjB,CAAC,GACA,KAAK,IAAI,CAAC,MAAM,EAAE,KAAK;AAAA,MACzB,GACC,OAAM,KAAK,mBAAmB,UAAU,SAAS;AAAA,QAChD,UAAU,GAAG,KAAK;AAAA,QAClB,QAAQ,GAAG,KAAK;AAAA,MACjB,CAAC,GACA,KAAK,IAAI,CAAC,MAAM,EAAE,KAAK;AAAA,IAC1B,EACE,IAAI,CAAC,MAAM,uBAAG,GAAG,EACjB,OAAO,CAAC,OAAqB,CAAC,CAAC,EAAE;AAEnC,UAAM,cAAc,UAAU,OAC7B,CAAC,QACA,CAAC,kBAAkB,KAAK,CAAC,QAAQ,IAAI,WAAW,MAAM,GAAG,CAAC,CAC5D;AAEA,eAAW,MAAM,aAAa;AAC7B,WAAK,IAAI,MAAM,sCAAsC,IAAI;AACzD,UAAI;AACH,cAAM,KAAK,eAAe,EAAE;AAAA,MAC7B,SAAS,GAAP;AAAA,MAEF;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,2BACb,MACA,aACgB;AAEhB,UAAM,gCAAW,IAAI;AAGrB,QAAI,KAAK;AAAkB;AAG3B,sDAAgB,KAAK,mBAAmB;AACxC,UAAM,YAAY,YAChB,IAAI,CAAC,QAAQ,CAAC,IAAI,cAAc,IAAI,gBAAgB,CAAU,EAC9D,OACA,CAAC,CAAC,KAAK,OAAO,QACb,IAAI,UAAU,CAAC,CAAC,SAAS,QAAQ,EAAE,MAAM,KAC3C;AAGD,eAAW,CAAC,IAAI,WAAW,WAAW;AACrC,YAAM,8BAAS,MAAM,IAAI,MAAM;AAAA,IAChC;AAIA,QACC,KAAK,iBAAiB,+BAAe,YACpC,KAAK,mBAAmB,+BAAe,YACvC,KAAK,2BAA2B,IAAI,KAAK,EAAE,MAC1C,+BAAe,UAChB;AACD,iBAAW,WAAW,aAAa;AAClC,cAAM,QAAQ,KAAK,SAAS,OAAO;AACnC,cAAM,iCACL,MACA,iCACI,UADJ;AAAA,UAEC,UAAU;AAAA,QACX,IAEA,IACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,kCACb,MACA,UACA,UACgB;AAEhB,UAAM,YAAY,SAChB,IAAI,CAAC,QAAQ,CAAC,IAAI,cAAc,IAAI,gBAAgB,CAAU,EAC9D,OACA,CAAC,CAAC,KAAK,OAAO,QACb,IAAI,UAAU,CAAC,CAAC,SAAS,QAAQ,EAAE,MAAM,KAC3C;AAGD,eAAW,CAAC,IAAI,WAAW,WAAW;AACrC,YAAM,yCAAoB,MAAM,UAAU,IAAI,MAAM;AAAA,IACrD;AAGA,eAAW,WAAW,UAAU;AAC/B,YAAM,2CAAsB,MAAM,UAAU,OAAO;AAAA,IACpD;AAAA,EACD;AAAA,EAEA,MAAc,4BACb,MACA,aACgB;AAEhB,sDAAgB,KAAK,mBAAmB;AACxC,UAAM,YAAY,YAChB,IAAI,CAAC,QAAQ,CAAC,IAAI,cAAc,IAAI,gBAAgB,CAAU,EAC9D,OACA,CAAC,CAAC,KAAK,OAAO,QACb,IAAI,UAAU,CAAC,CAAC,SAAS,QAAQ,EAAE,MAAM,KAC3C;AAED,UAAM,iBAAiB,GAAG,KAAK,aAAa,oCAAgB,KAAK,EAAE;AAEnE,UAAM,oBAAoB,IAAI,IAC7B,UAAU,IACT,CAAC,CAAC,EAAE,YACH,GAAG,KAAK,aAAa,sCAAiB,KAAK,IAAI,MAAM,GACvD,CACD;AACA,UAAM,qBAAqB,OAAO,KACjC,MAAM,qBAAE,GAAG,GAAG,oBAAoB;AAAA,MACjC,MAAM;AAAA,IACP,CAAC,CACF;AACA,UAAM,kBAAkB,IAAI,IAC3B,YAAY,IACX,CAAC,QAAQ,GAAG,KAAK,aAAa,oCAAe,KAAK,IAAI,GAAG,GAC1D,CACD;AACA,UAAM,mBAAmB,OAAO,KAC/B,MAAM,qBAAE,GAAG,GAAG,oBAAoB;AAAA,MACjC,MAAM;AAAA,IACP,CAAC,CACF;AAGA,UAAM,iBAAiB,mBACrB,OAAO,CAAC,OAAO,CAAC,kBAAkB,IAAI,EAAE,CAAC,EAEzC,OAAO,CAAC,OAAO,GAAG,MAAM,eAAe,SAAS,CAAC,MAAM,MAAM;AAE/D,eAAW,MAAM,gBAAgB;AAChC,WAAK,IAAI,KAAK,6BAA6B,IAAI;AAC/C,UAAI;AACH,cAAM,KAAK,eAAe,EAAE;AAAA,MAC7B,SAAS,GAAP;AAAA,MAEF;AAAA,IACD;AAEA,UAAM,eAAe,iBAEnB,OAAO,CAAC,OAAO,CAAC,gBAAgB,IAAI,EAAE,CAAC,EAEvC,OAAO,CAAC,OAAO,GAAG,MAAM,eAAe,SAAS,CAAC,EAAE,SAAS,GAAG,CAAC,EAEhE,OACA,CAAC,OACA,CAAC,GAAG,MAAM,eAAe,SAAS,CAAC,EAAE,WAAW,OAAO,CACzD,EAEC,OAAO,CAAC,OAAI;AAnwBhB;AAmwBmB,cAAC,kBAAK,SAAS,QAAd,mBAAmB,WAAnB,mBAA2B;AAAA,KAAiB;AAE9D,eAAW,MAAM,cAAc;AAC9B,WAAK,IAAI,KAAK,2BAA2B,IAAI;AAC7C,UAAI;AACH,cAAM,KAAK,cAAc,EAAE;AAAA,MAC5B,SAAS,GAAP;AAAA,MAEF;AACA,UAAI;AACH,cAAM,KAAK,eAAe,EAAE;AAAA,MAC7B,SAAS,GAAP;AAAA,MAEF;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,0BACb,UACA,UACgB;AAEhB,UAAM,YAAY,SAChB,IAAI,CAAC,QAAQ,CAAC,IAAI,cAAc,IAAI,gBAAgB,CAAU,EAC9D,OACA,CAAC,CAAC,KAAK,OAAO,QACb,IAAI,UAAU,CAAC,CAAC,SAAS,QAAQ,EAAE,MAAM,KAC3C;AAED,UAAM,iBAAiB,GAAG,KAAK,aAAa;AAE5C,UAAM,oBAAoB,IAAI,IAC7B,UAAU,IACT,CAAC,CAAC,EAAE,YACH,GAAG,KAAK,aAAa,6CACpB,UACA,MACD,GACF,CACD;AACA,UAAM,qBAAqB,OAAO,KACjC,MAAM,qBAAE,GAAG,GAAG,oBAAoB;AAAA,MACjC,MAAM;AAAA,IACP,CAAC,CACF;AACA,UAAM,kBAAkB,IAAI,IAC3B,SAAS,IACR,CAAC,QACA,GAAG,KAAK,aAAa,2CAAsB,UAAU,GAAG,GAC1D,CACD;AACA,UAAM,mBAAmB,OAAO,KAC/B,MAAM,qBAAE,GAAG,GAAG,oBAAoB;AAAA,MACjC,MAAM;AAAA,IACP,CAAC,CACF;AAGA,UAAM,iBAAiB,mBAAmB,OACzC,CAAC,OAAO,CAAC,kBAAkB,IAAI,EAAE,CAClC;AACA,eAAW,MAAM,gBAAgB;AAChC,WAAK,IAAI,KAAK,6BAA6B,IAAI;AAC/C,UAAI;AACH,cAAM,KAAK,eAAe,EAAE;AAAA,MAC7B,SAAS,GAAP;AAAA,MAEF;AAAA,IACD;AAEA,UAAM,eAAe,iBAEnB,OAAO,CAAC,OAAO,CAAC,gBAAgB,IAAI,EAAE,CAAC,EAEvC,OAAO,CAAC,OAAO,GAAG,MAAM,eAAe,SAAS,CAAC,EAAE,SAAS,GAAG,CAAC,EAEhE,OAAO,CAAC,OAAI;AA/0BhB;AA+0BmB,cAAC,kBAAK,SAAS,QAAd,mBAAmB,WAAnB,mBAA2B;AAAA,KAAiB;AAE9D,eAAW,MAAM,cAAc;AAC9B,WAAK,IAAI,KAAK,mCAAmC,IAAI;AACrD,UAAI;AACH,cAAM,KAAK,eAAe,EAAE;AAAA,MAC7B,SAAS,GAAP;AAAA,MAEF;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,mBAAmB,MAAgC;AAChE,UAAM,iBAAiB,GAAG,KAAK,aAAa,oCAAgB,KAAK,EAAE;AACnE,QACC,CAAC,KAAK,WAAW,IAAI,KAAK,EAAE,KAC5B,CAAE,mBAAkB,KAAK,WACxB;AACD,YAAM,gCAAW,IAAI;AAAA,IACtB;AAAA,EACD;AAAA,EAEA,MAAc,sBACb,MACA,MACgB;AAChB,QAAI,KAAK,SAAS;AACjB,WAAK,IAAI,MACR,QAAQ,KAAK,wBAAwB,KAAK,cAC3C;AAAA,IACD,OAAO;AACN,WAAK,IAAI,KACR,QAAQ,KAAK,wBAAwB,KAAK,cAC3C;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,yBAAyB,MAAgC;AACtE,SAAK,IAAI,KAAK,QAAQ,KAAK,wBAAwB;AAAA,EACpD;AAAA,EAEA,MAAc,aACb,MACA,WACgB;AAChB,UAAM,mCAAc,KAAK,IAAI,OAAO;AACpC,SAAK,IAAI,KACR,QAAQ,KAAK,SACZ,cAAc,2BAAW,UAAU,KAAK,aAE1C;AAAA,EACD;AAAA,EAEA,MAAc,YACb,MACA,WACgB;AAChB,UAAM,mCAAc,KAAK,IAAI,QAAQ;AACrC,SAAK,IAAI,KACR,QAAQ,KAAK,SACZ,cAAc,2BAAW,UAAU,KAAK,cAE1C;AAGA,UAAM,KAAK,mBAAmB,IAAI;AAAA,EACnC;AAAA,EAEA,MAAc,YACb,MACA,WACgB;AAChB,UAAM,mCAAc,KAAK,IAAI,OAAO;AACpC,QAAI,cAAc,2BAAW,MAAM;AAClC,WAAK,IAAI,KAAK,QAAQ,KAAK,gCAAgC;AAAA,IAC5D,OAAO;AACN,WAAK,IAAI,KAAK,QAAQ,KAAK,aAAa;AAAA,IACzC;AAAA,EACD;AAAA,EAEA,MAAc,WACb,MACA,WACgB;AAChB,UAAM,mCAAc,KAAK,IAAI,MAAM;AACnC,SAAK,IAAI,KACR,QAAQ,KAAK,SACZ,cAAc,2BAAW,UAAU,KAAK,YAE1C;AAGA,UAAM,KAAK,mBAAmB,IAAI;AAAA,EACnC;AAAA,EAEA,MAAc,iBACb,MACA,MACgB;AAChB,QAAI,eAAe,oCAAe,KAAK,IAAI,IAAI;AAC/C,mBAAe,aAAa,OAAO,aAAa,YAAY,GAAG,IAAI,CAAC;AACpE,SAAK,IAAI,MACR,QAAQ,KAAK,oBAAoB,mBAAmB,OACnD,KAAK,QACN,GACD;AACA,UAAM,iCAAY,MAAM,IAAI;AAC5B,QAAI,KAAK,OAAO;AAAc,YAAM,KAAK,iBAAiB,MAAM,IAAI;AAAA,EACrE;AAAA,EAEA,MAAc,mBACb,MACA,MACgB;AAChB,QAAI,eAAe,oCAAe,KAAK,IAAI,IAAI;AAC/C,mBAAe,aAAa,OAAO,aAAa,YAAY,GAAG,IAAI,CAAC;AACpE,SAAK,IAAI,MACR,QAAQ,KAAK,sBAAsB,mBAAmB,OACrD,KAAK,QACN,GACD;AACA,UAAM,iCAAY,MAAM,IAAI;AAC5B,QAAI,KAAK,OAAO;AAAc,YAAM,KAAK,iBAAiB,MAAM,IAAI;AAAA,EACrE;AAAA,EAEA,MAAc,wBACb,MACA,MACgB;AAChB,QAAI,eAAe,oCAAe,KAAK,IAAI,IAAI;AAC/C,mBAAe,aAAa,OAAO,aAAa,YAAY,GAAG,IAAI,CAAC;AACpE,SAAK,IAAI,MACR,QAAQ,KAAK,2BAA2B,kBAAkB,OACzD,KAAK,KACN,GACD;AACA,UAAM,6CAAwB,MAAM,IAAI;AAAA,EACzC;AAAA,EAGA,MAAc,iBACb,MACA,MACgB;AAChB,QACE,MAAK,iBAAiB,2BAAe,oBACrC,KAAK,iBAAiB,2BAAe,yBACtC,KAAK,aAAa,gBACjB;AACD,YAAM,iCAAY,MAAM,iCACpB,OADoB;AAAA,QAEvB,UAAU;AAAA,QACV,cAAc;AAAA,MACf,EAAC;AAAA,IACF;AAAA,EACD;AAAA,EAEA,MAAc,mBACb,MACA,MACgB;AAChB,QAAI,eAAe,oCAAe,KAAK,IAAI,IAAI;AAC/C,mBAAe,aAAa,OAAO,aAAa,YAAY,GAAG,IAAI,CAAC;AACpE,SAAK,IAAI,MAAM,QAAQ,KAAK,sBAAsB,cAAc;AAChE,UAAM,iCAAY,KAAK,IAAI,IAAI;AAAA,EAChC;AAAA,EAEA,MAAc,sBACb,MACA,MACgB;AAChB,QAAI,eAAe,oCAAe,KAAK,IAAI,IAAI;AAC/C,mBAAe,aAAa,OAAO,aAAa,YAAY,GAAG,IAAI,CAAC;AACpE,SAAK,IAAI,MAAM,QAAQ,KAAK,yBAAyB,cAAc;AACnE,UAAM,oCAAe,MAAM,IAAI;AAAA,EAChC;AAAA,EAEA,MAAc,6BACb,MACA,eACA,gBACgB;AAChB,SAAK,eAAe;AAAA,MACnB,MAAM;AAAA,MACN,UAAU;AAAA,QACT,MAAM;AAAA,QACN;AAAA,QACA;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,6BACb,MACA,QACA,UACgB;AAChB,SAAK,eAAe;AAAA,MACnB,MAAM;AAAA,MACN,UAAU;AAAA,QACT,MAAM;AAAA,QACN;AAAA,QACA;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAcA,MAAc,wBACb,MACA,YACgB;AAChB,UAAM,uCAAkB,KAAK,IAAI,UAAU;AAAA,EAC5C;AAAA,EAEA,MAAc,wBAAuC;AAjjCtD;AAmjCE,QAAI,CAAE,aAAM,KAAK,cAAc,mBAAmB,MAA5C,mBAAgD,MAAK;AAC1D,UAAI;AACH,cAAM,KAAK,qBACV,qBACC,YAAM,KAAK,OAAO,sBAAsB,MAAxC,YAA8C,MAC/C,IACD;AAAA,MACD,SAAS,GAAP;AACD,cAAM,KAAK,qBACV,qBACA,MACA,IACD;AACA,aAAK,IAAI,MACR,uCAAuC,oCAAgB,CAAC,GACzD;AAAA,MACD;AAAA,IACD;AAIA,UAAM,OAAO,IAAI,KAAK,EAAE,YAAY;AACpC,QAAI,eAAe,IAAI;AACvB,QAAI,gBAAgB;AAAG,sBAAgB;AACvC,SAAK,sBAAsB,WAC1B,MAAM,KAAK,sBAAsB,GACjC,eAAe,OAAO,GACvB;AAAA,EACD;AAAA,EAKA,MAAc,SAAS,UAAqC;AAC3D,QAAI;AACH,WAAK,IAAI,KAAK,yBAAyB;AACvC,YAAM,aAAa,CAAC,GAAG,KAAK,OAAO,WAAW,MAAM,KAAK,CAAC;AAC1D,YAAM,KAAK,OAAO,QAAQ;AAE1B,WAAK,IAAI,KAAK,0BAA0B;AACxC,iBAAW,UAAU,YAAY;AAChC,cAAM,mCAAc,QAAQ,SAAS;AACrC,cAAM,kCAAa,QAAQ,KAAK;AAChC,cAAM,uCAAkB,QAAQ,IAAI;AAAA,MACrC;AAEA,UAAI,KAAK;AACR,qBAAa,KAAK,mBAAmB;AACtC,UAAI,KAAK;AACR,qBAAa,KAAK,4BAA4B;AAE/C,YAAM,KAAK,cAAc,uBAAuB,OAAO,IAAI;AAC3D,YAAM,6CAAwB,IAAI;AAElC,WAAK,IAAI,KAAK,wBAAwB;AACtC,eAAS;AAAA,IACV,SAAS,GAAP;AACD,eAAS;AAAA,IACV;AAAA,EACD;AAAA,EAKA,MAAc,aAAa,OAA6B;AACvD,QAAI,QAA0B;AAE9B,QACC,iBAAiB,8BACjB,MAAM,SAAS,gCAAgB,sCAC9B;AACD,cAAQ;AAAA,IACT;AAEA,SAAK,IAAI,OAAO,MAAM,OAAO;AAE7B,QACC,iBAAiB,8BACjB,MAAM,SAAS,gCAAgB,eAC9B;AAED,WAAK,IAAI,MAAM,uCAAuC;AACtD,iBAAW,MAAM;AAChB,aAAK,UAAU,MAAM,WAAW,4BAA4B;AAAA,MAC7D,GAAG,GAAI;AAAA,IACR;AAAA,EACD;AAAA,EAKA,MAAc,eACb,IACA,MACgB;AAChB,UAAM,SAAS,KAAK,YAAY;AAChC,QAAI,GAAG,WAAW,MAAM,KAAK,GAAG,QAAQ,KAAK,OAAO,MAAM,MAAM,IAAI;AAGnE,WAAK,sBAAsB;AAC3B,YAAM,KAAK,mBAAmB;AAAA,IAC/B;AAAA,EACD;AAAA,EAKA,MAAc,cACb,IACA,OACgB;AAChB,QAAI,OAAO;AAEV,UAAI,CAAC,MAAM,KAAK;AAEf,YAAI,CAAC,KAAK,aAAa;AACtB,eAAK,IAAI,KACR,2DAA2D,KAC5D;AACA;AAAA,QACD;AAGA,YAAI,GAAG,SAAS,gBAAgB,GAAG;AAClC,gBAAM,KAAK,iBAAiB,MAAM,GAAU;AAC5C;AAAA,QACD,WAAW,GAAG,WAAW,GAAG,KAAK,iBAAiB,GAAG;AACpD;AAAA,QACD;AAGA,cAAM,MAAM,KAAK,SAAS;AAC1B,YAAI,CAAC,KAAK;AACT,eAAK,IAAI,MACR,+BAA+B,gBAChC;AAEA;AAAA,QACD;AAEA,cAAM,EAAE,WAAW;AAEnB,cAAM,UAA+B,OAAO;AAC5C,YACC,CACC,YACA,OAAO,QAAQ,iBAAiB,YAC/B,QAAO,QAAQ,aAAa,YAC5B,OAAO,QAAQ,aAAa,YAE7B;AACD,eAAK,IAAI,MACR,uDAAuD,KACxD;AACA;AAAA,QACD;AAEA,YAAI;AACJ,YAAI,CAAC,CAAC,OAAO,WAAW;AACvB,iBAAO,KAAK,OAAO,WAAW,iBAAiB;AAAA,QAChD,WAAW,+BAAQ,OAAO,OAAO,GAAG;AACnC,iBAAO,KAAK,OAAO,WAAW,kBAC7B,OAAO,QAAQ,OAAO,CAAC,MACtB,KAAK,OAAO,WAAW,MAAM,IAAI,CAAC,CACnC,CACD;AAAA,QACD,OAAO;AACN,gBAAM,SAAS,OAAO;AACtB,cAAI,CAAC,QAAQ;AACZ,iBAAK,IAAI,MACR,0CAA0C,KAC3C;AACA;AAAA,UACD;AACA,cAAI;AACH,mBAAO,KAAK,OAAO,WAAW,MAAM,WAAW,MAAM;AAAA,UACtD,QAAE;AACD,iBAAK,IAAI,MAAM,QAAQ,wBAAwB;AAC/C;AAAA,UACD;AAAA,QACD;AAGA,YAAI,WAAoB,MAAM;AAC9B,YAAI,OAAO,aAAa,YAAY,kCAAc,QAAQ,GAAG;AAC5D,qBAAW,kCAAc,QAAQ;AAAA,QAClC;AAEA,YAAI;AACH,gBAAM,KAAK,SAAS,SAAS,QAAQ;AAErC,gBAAM,KAAK,cAAc,IAAI,EAAE,KAAK,MAAM,KAAK,KAAK,KAAK,CAAC;AAAA,QAC3D,SAAS,GAAP;AACD,eAAK,IAAI,MAAM,oCAAgB,CAAC,CAAC;AAAA,QAClC;AAAA,MACD;AAAA,IACD;AAAA,EAGD;AAAA,EAEA,MAAc,iBAAiB,QAAgC;AAC9D,QAAI;AACH,UAAI,QAAQ;AACX,cAAM,KAAK,OAAO,WAAW,eAAe;AAAA,UAC3C,UAAU,oCAAkB;AAAA,QAC7B,CAAC;AAAA,MACF,OAAO;AACN,cAAM,KAAK,OAAO,WAAW,cAAc;AAAA,MAC5C;AAAA,IACD,SAAS,GAAP;AAED,WAAK,IAAI,MAAM,oCAAgB,CAAC,CAAC;AAAA,IAClC;AAAA,EACD;AAAA,EAWA,AAAQ,eAAe,SAA4B;AAClD,SAAK,aAAa,KAAK,OAAO;AAC9B,QAAI,KAAK;AAAoB;AAC7B,SAAK,qBAAqB;AAC1B,QAAI,KAAK,cAAc,OAAO,GAAG;AAChC,YAAM,WAAW,KAAK,aAAa,OAClC,GACA,KAAK,aAAa,MACnB;AAEA,WAAK,cAAc,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC;AAC/C,WAAK,cAAc,MAAM;AAAA,IAC1B,OAAO;AAEN,UAAI,CAAC,KAAK,8BAA8B;AACvC,aAAK,+BAA+B,WAAW,MAAM;AAEpD,eAAK,aAAa,OAAO,GAAG,KAAK,aAAa,MAAM;AAAA,QACrD,GAAG,IAAI;AAAA,MACR;AAAA,IACD;AACA,SAAK,qBAAqB;AAAA,EAC3B;AAAA,EAgBA,MAAc,UAAU,KAAsC;AA1zC/D;AA4zCE,UAAM,UAAU,CAAC,aAAwB;AACxC,UAAI,IAAI;AACP,aAAK,OAAO,IAAI,MAAM,IAAI,SAAS,UAAU,IAAI,QAAQ;AAAA,IAC3D;AAEA,UAAM,YAAY;AAAA,MACjB,KAAK,EAAE,OAAO,KAAK;AAAA,MACnB,IAAI,EAAE,OAAO,MAAM,QAAQ,KAAK;AAAA,MAChC,uBAAuB,EAAE,OAAO,mBAAmB;AAAA,MACnD,mBAAmB,CAAC,cAAsB;AACzC,eAAO,EAAE,OAAO,wBAAwB,YAAY,KAAK;AAAA,MAC1D;AAAA,MACA,gBAAgB,EAAE,OAAO,yBAAyB;AAAA,MAClD,QAAQ,CAAC,WAAqB,GAAE,OAAO,MAAM,OAAO;AAAA,MACpD,OAAO,CAAC,UAAmB,GAAE,MAAM;AAAA,IACpC;AAEA,8BAA0B,QAA2B;AACpD,UAAI,CAAC,OAAO;AAAQ,eAAO;AAC3B,iBAAW,SAAS,QAAQ;AAC3B,YAAI,CAAE,KAAI,WAAW,IAAI,QAAQ,eAAe,KAAK,IAAI;AACxD,kBAAQ,UAAU,kBAAkB,KAAK,CAAC;AAC1C,iBAAO;AAAA,QACR;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAEA,QAAI,KAAK;AACR,cAAQ,IAAI;AAAA,aACN,iBAAiB;AACrB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,sDACD,CACD;AAAA,UACD;AAEA,gBAAM,QAAQ;AAAA,YACb,GAAG,KAAK,OAAO,WAAW,MAAM,OAAO;AAAA,UACxC,EAAE,IAAI,OAAO,SAAU;AAAA,YACtB,IAAI,KAAK;AAAA,YACT,MAAM,QAAQ,KAAK;AAAA,YACnB,WACC,MAAM,KAAK,OAAO,WAAW,iBAC5B,KAAK,EACN;AAAA,UACF,EAAE;AACF,gBAAM,MAAM,MAAM,QAAQ,IAAI,KAAK;AACnC,kBAAQ,UAAU,OAAO,GAAG,CAAC;AAC7B;AAAA,QACD;AAAA,aAEK,kBAAkB;AACtB,gBAAM,QAAQ,MAAM,6CAAqB,IAAI;AAC7C,kBAAQ,UAAU,OAAO,KAAK,CAAC;AAC/B;AAAA,QACD;AAAA,aAEK,wBAAwB;AAC5B,cAAI,CAAC,cAAc,MAAM;AAAG;AAE5B,gBAAM,SAAS,IAAI;AACnB,gBAAM,eAAe,CAAC,CAAC,OAAO;AAE9B,cAAI,cAAc;AACjB,iBAAK,aAAa,OAAO,GAAG,KAAK,aAAa,MAAM;AAAA,UACrD;AAEA,cAAI,KAAK,aAAa,QAAQ;AAG7B,oBAAQ,UAAU,OAAO,KAAK,YAAY,CAAC;AAC3C,iBAAK,aAAa,OAAO,GAAG,KAAK,aAAa,MAAM;AACpD,gBAAI,KAAK;AACR,2BAAa,KAAK,4BAA4B;AAAA,UAChD,OAAO;AAEN,iBAAK,cAAc,IAAI,OAAO,MAAM,CAAC,WACpC,QAAQ,UAAU,OAAO,MAAM,CAAC,CACjC;AAAA,UACD;AAEA;AAAA,QACD;AAAA,aAEK,sBAAsB;AAC1B,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,6CACD,CACD;AAAA,UACD;AACA,gBAAM,qBACL,CAAC,CAAC,KAAK,OAAO,WAAW,gBACxB,+BAAa,UACd;AAED,iBAAO,QAAQ,UAAU,OAAO,kBAAkB,CAAC;AAAA,QACpD;AAAA,aAEK,cAAc;AAClB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AACA,cAAI,CAAC,cAAc,MAAM;AAAG;AAC5B,gBAAM,SAAS,IAAI;AACnB,gBAAM,OAAO,OAAO;AACpB,gBAAM,UAAU,CAAC,CAAC,OAAO;AAEzB,cAAI;AACH,kBAAM,eAAe,mCAAkB,IAAI;AAC3C,kBAAM,OAAO,KAAK,OAAO,WAAW,aACnC,aAAa,GACd;AACA,kBAAM,qBACL,CAAC,CAAC,KAAK,OAAO,WAAW,gBACxB,+BAAa,UACd;AAED,gBAAI,WAAW,MAAM;AAGpB,qBAAO,QACN,UAAU,OAAO;AAAA,gBAChB,MAAM;AAAA,gBACN,QAAQ,KAAK;AAAA,cACd,CAAC,CACF;AAAA,YACD,WACC,sBACA,KAAK,OAAO,WAAW,qBACtB,aAAa,GACd,GACC;AACD,qBAAO,QACN,UAAU,OAAO;AAAA,gBAChB,MAAM;AAAA,iBACH,aACH,CACF;AAAA,YACD,WACC,CAAC,sBACD,aAAa,YAAY,0BAAc,IACtC;AACD,kBAAI,CAAC,SAAS;AACb,uBAAO,QACN,UAAU,OAAO,EAAE,MAAM,KAAK,CAAC,CAChC;AAAA,cACD;AAEA,kBAAI;AACH,sBAAM,SACL,MAAM,KAAK,OAAO,WAAW,eAC5B;AAAA,kBACC,UACC,oCAAkB;AAAA,kBACnB;AAAA,gBACD,CACD;AACD,qBAAK,SAAS,kBAAkB,MAAM,IAAI;AAE1C,oBAAI,QAAQ;AACX,yBAAO,QACN,UAAU,OAAO,EAAE,MAAM,KAAK,CAAC,CAChC;AAAA,gBACD,OAAO;AACN,0BAAQ,UAAU,cAAc;AAAA,gBACjC;AAAA,cACD,SAAS,GAAP;AACD,wBAAQ,UAAU,MAAM,oCAAgB,CAAC,CAAC,CAAC;AAC3C,qBAAK,SAAS,kBAAkB,OAAO,IAAI;AAAA,cAC5C;AAAA,YACD,WACC,aAAa,YAAY,0BAAc,YACtC;AACD,kBAAI,CAAC,SAAS;AACb,uBAAO,QACN,UAAU,OAAO;AAAA,kBAChB,MAAM;AAAA,mBACH,aACH,CACF;AAAA,cACD;AAGA,mBAAK,OAAO,WAAW,wBACtB,YACD;AACA,qBAAO,QACN,UAAU,OAAO;AAAA,gBAChB,MAAM;AAAA,iBACH,aACH,CACF;AAAA,YACD;AAAA,UACD,QAAE;AAAA,UAEF;AAEA,iBAAO,QAAQ,UAAU,OAAO,EAAE,MAAM,OAAO,CAAC,CAAC;AAAA,QAClD;AAAA,aAEK,2BAA2B;AAC/B,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AAEA,cAAI,CAAC,cAAc,OAAO,iBAAiB;AAAG;AAC9C,gBAAM,SAAS,IAAI;AACnB,gBAAM,SAAS,OAAO;AACtB,gBAAM,MAAM,OAAO;AACnB,gBAAM,kBACL,OAAO;AACR,gBAAM,iBACL,aAAO,mBAAP,YAAyB,CAAC;AAC3B,cAAI,YAAY;AACf,mBAAO,eAAe;AACvB,cAAI,SAAS;AAAgB,mBAAO,eAAe;AACnD,cAAI,qBAAqB;AACxB,mBAAO,eAAe;AAEvB,cAAI;AACH,iBAAK,OAAO,WAAW,wBAAwB;AAAA,cAC9C;AAAA,cACA;AAAA,cACA;AAAA,eACG,eACH;AACD,oBAAQ,UAAU,EAAE;AAAA,UACrB,SAAS,GAAP;AACD,oBAAQ,UAAU,MAAM,oCAAgB,CAAC,CAAC,CAAC;AAAA,UAC5C;AACA;AAAA,QACD;AAAA,aAEK,6BAA6B;AACjC,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AAEA,cAAI,CAAC,cAAc,KAAK;AAAG;AAC3B,gBAAM,SAAS,IAAI;AACnB,gBAAM,MAAM,OAAO;AAEnB,cAAI;AACH,iBAAK,OAAO,WAAW,0BAA0B,GAAG;AACpD,oBAAQ,UAAU,EAAE;AAAA,UACrB,SAAS,GAAP;AACD,oBAAQ,UAAU,MAAM,oCAAgB,CAAC,CAAC,CAAC;AAAA,UAC5C;AACA;AAAA,QACD;AAAA,aAEK,0BAA0B;AAC9B,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AACA,gBAAM,SACL,KAAK,OAAO,WAAW,uBAAuB;AAE/C,qBAAW,SAAS,QAAQ;AAC3B,gBACC,OAAO,MAAM,mBAAmB,YAChC,OAAO,MAAM,gBAAgB,YAC7B,OAAO,MAAM,cAAc,YAC3B,OAAO,MAAM,uBAAuB,UACnC;AACD,oBAAM,SACL,MAAM,KAAK,OAAO,cAAc,aAC/B,MAAM,gBACN,MAAM,aACN,MAAM,WACN,MAAM,kBACP;AACD,kBAAI,QAAQ;AACX,sBAAM,eAAe,OAAO;AAC5B,sBAAM,QAAQ,OAAO;AACrB,sBAAM,cAAc,OAAO;AAAA,cAC5B;AAAA,YACD;AAAA,UACD;AAEA,iBAAO,QAAQ,UAAU,OAAO,MAAM,CAAC;AAAA,QACxC;AAAA,aAEK,kBAAkB;AACtB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,iDACD,CACD;AAAA,UACD;AAEA,cAAI,CAAC,cAAc,UAAU;AAAG;AAChC,gBAAM,SAAS,IAAI;AACnB,gBAAM,WAAW,OAAO;AACxB,gBAAM,gBAAgB,CAAC,CAAC,OAAO;AAE/B,eAAK,qBAAqB;AAC1B,eAAK,8BAA8B;AAEnC,cAAI;AACH,kBAAM,SACL,MAAM,KAAK,OAAO,WAAW,eAAe;AAAA,cAC3C;AAAA,cACA;AAAA,YACD,CAAC;AACF,iBAAK,SAAS,kBAAkB,MAAM,IAAI;AAE1C,gBAAI,QAAQ;AACX,sBAAQ,UAAU,EAAE;AAAA,YACrB,OAAO;AACN,sBAAQ,UAAU,cAAc;AAAA,YACjC;AAAA,UACD,SAAS,GAAP;AACD,oBAAQ,UAAU,MAAM,oCAAgB,CAAC,CAAC,CAAC;AAC3C,iBAAK,SAAS,kBAAkB,OAAO,IAAI;AAAA,UAC5C;AACA;AAAA,QACD;AAAA,aAEK,eAAe;AACnB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,iDACD,CACD;AAAA,UACD;AAEA,cAAI,CAAC,cAAc,KAAK;AAAG;AAC3B,gBAAM,SAAS,IAAI;AACnB,gBAAM,MAAc,OAAO;AAE3B,cAAI,CAAC,KAAK;AACT,uBAAK,uBAAL,mBAAyB,QAAQ;AAAA,UAClC,OAAO;AACN,uBAAK,uBAAL,mBAAyB,QAAQ;AAAA,UAClC;AAEA,eAAK,eAAe;AAAA,YACnB,MAAM;AAAA,YACN,QAAQ,EAAE,MAAM,OAAO;AAAA,UACxB,CAAC;AAED,kBAAQ,UAAU,GAAG;AACrB;AAAA,QACD;AAAA,aAEK,wBAAwB;AAC5B,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,iDACD,CACD;AAAA,UACD;AAEA,cAAI,CAAC,cAAc,OAAO;AAAG;AAC7B,gBAAM,SAAS,IAAI;AACnB,gBAAM,QAAQ,OAAO;AAErB,qBAAK,gCAAL,mBAAkC,QAAQ;AAE1C,eAAK,eAAe;AAAA,YACnB,MAAM;AAAA,YACN,QAAQ,EAAE,MAAM,OAAO;AAAA,UACxB,CAAC;AAED,kBAAQ,UAAU,GAAG;AACrB;AAAA,QACD;AAAA,aAEK,iBAAiB;AACrB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,iDACD,CACD;AAAA,UACD;AAEA,gBAAM,SAAS,MAAM,KAAK,OAAO,WAAW,cAAc;AAC1D,eAAK,SAAS,kBAAkB,OAAO,IAAI;AAC3C,cAAI,QAAQ;AACX,oBAAQ,UAAU,EAAE;AAAA,UACrB,OAAO;AACN,oBAAQ,UAAU,cAAc;AAAA,UACjC;AACA;AAAA,QACD;AAAA,aAEK,uBAAuB;AAC3B,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,kDACD,CACD;AAAA,UACD;AAEA,gBAAM,SAAS,KAAK,OAAO,WAAW,oBAAoB;AAC1D,cAAI,QAAQ;AACX,oBAAQ,UAAU,EAAE;AACpB,iBAAK,SAAS,uBAAuB,MAAM,IAAI;AAAA,UAChD,OAAO;AACN,oBAAQ,UAAU,cAAc;AAAA,UACjC;AACA;AAAA,QACD;AAAA,aAEK,sBAAsB;AAC1B,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,kDACD,CACD;AAAA,UACD;AAEA,eAAK,OAAO,WAAW,mBAAmB;AAC1C,kBAAQ,UAAU,EAAE;AACpB,eAAK,SAAS,uBAAuB,OAAO,IAAI;AAChD;AAAA,QACD;AAAA,aAEK,aAAa;AACjB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MAAM,8BAA8B,CAC/C;AAAA,UACD;AAEA,cAAI;AACH,kBAAM,KAAK,OAAO,UAAU;AAC5B,oBAAQ,UAAU,EAAE;AAAA,UACrB,SAAS,GAAP;AACD,oBAAQ,UAAU,MAAM,oCAAgB,CAAC,CAAC,CAAC;AAAA,UAC5C;AACA;AAAA,QACD;AAAA,aAEK,aAAa;AACjB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MAAM,8BAA8B,CAC/C;AAAA,UACD;AAEA,cAAI;AACH,kBAAM,KAAK,OAAO,UAAU;AAC5B,oBAAQ,UAAU,EAAE;AACpB,iBAAK,QAAQ;AAAA,UACd,SAAS,GAAP;AACD,oBAAQ,UAAU,MAAM,oCAAgB,CAAC,CAAC,CAAC;AAAA,UAC5C;AACA;AAAA,QACD;AAAA,aAEK,cAAc;AAClB,eAAK,aAAa,EAAE,YAAY,KAAK,CAAC;AACtC,kBAAQ,UAAU,EAAE;AACpB;AAAA,QACD;AAAA,aAEK,oBAAoB;AACxB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AACA,cAAI,CAAC,cAAc,QAAQ;AAAG;AAC9B,gBAAM,SAAS,IAAI;AAEnB,cAAI;AACH,kBAAM,KAAK,OAAO,WAAW,iBAC5B,OAAO,MACR;AAAA,UACD,SAAS,GAAP;AACD,mBAAO,QACN,UAAU,MACT,yBACC,OAAO,WACH,oCAAgB,CAAC,GACvB,CACD;AAAA,UACD;AACA,iBAAO,QAAQ,UAAU,EAAE;AAAA,QAC5B;AAAA,aAEK,qBAAqB;AACzB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,iDACD,CACD;AAAA,UACD;AAEA,cAAI,CAAC,cAAc,UAAU,UAAU;AAAG;AAC1C,gBAAM,SAAS,IAAI;AACnB,gBAAM,WAAW,OAAO;AAExB,eAAK,qBAAqB;AAC1B,eAAK,8BAA8B;AAEnC,gBAAM,gBAAwC;AAAA,YAC7C,wBAAwB,CAAC,QAAQ;AAChC,mBAAK,qBAAqB,mDAAsB;AAChD,mBAAK,eAAe;AAAA,gBACnB,MAAM;AAAA,gBACN,QAAQ;AAAA,kBACP,MAAM;AAAA,kBACN;AAAA,gBACD;AAAA,cACD,CAAC;AACD,qBAAO,KAAK;AAAA,YACb;AAAA,YACA,sBAAsB,CAAC,UAAU;AAChC,mBAAK,8BACJ,mDAAsB;AACvB,mBAAK,eAAe;AAAA,gBACnB,MAAM;AAAA,gBACN,QAAQ;AAAA,kBACP,MAAM;AAAA,kBACN,SAAS;AAAA,gBACV;AAAA,cACD,CAAC;AACD,qBAAO,KAAK;AAAA,YACb;AAAA,YACA,OAAO,MAAM;AAAA,YAEb;AAAA,UACD;AAEA,cAAI;AACH,kBAAM,SACL,MAAM,KAAK,OAAO,WAAW,kBAC5B,OAAO,QACP;AAAA,cACC;AAAA,cACA;AAAA,YACD,CACD;AACD,iBAAK,SAAS,kBAAkB,MAAM,IAAI;AAE1C,gBAAI,QAAQ;AACX,sBAAQ,UAAU,EAAE;AAAA,YACrB,OAAO;AACN,sBAAQ,UAAU,cAAc;AAAA,YACjC;AAAA,UACD,SAAS,GAAP;AACD,oBAAQ,UAAU,MAAM,oCAAgB,CAAC,CAAC,CAAC;AAC3C,iBAAK,SAAS,kBAAkB,OAAO,IAAI;AAAA,UAC5C;AACA;AAAA,QACD;AAAA,aAEK,eAAe;AACnB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AACA,cAAI,CAAC,cAAc,QAAQ;AAAG;AAC9B,gBAAM,SAAS,IAAI;AAEnB,cAAI;AACH,kBAAM,KAAK,OAAO,WAAW,YAAY,OAAO,MAAM;AACtD,kBAAM,sCAAiB,OAAO,MAAM;AAAA,UACrC,SAAS,GAAP;AACD,mBAAO,QACN,UAAU,MACT,2BAA2B,qCAC1B,4BACA,OAAO,MACR,MAAM,oCAAgB,CAAC,GACxB,CACD;AAAA,UACD;AACA,iBAAO,QAAQ,UAAU,EAAE;AAAA,QAC5B;AAAA,aAEK,sBAAsB;AAC1B,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AACA,cAAI,CAAC,cAAc,QAAQ;AAAG;AAC9B,gBAAM,SAAS,IAAI;AAEnB,cAAI;AACH,kBAAM,OAAO,KAAK,OAAO,WAAW,MAAM,WACzC,OAAO,MACR;AACA,kBAAM,MAAM,KAAK,mBAAmB;AACpC,mBAAO,QAAQ,UAAU,OAAO,GAAG,CAAC;AAAA,UACrC,SAAS,GAAP;AACD,mBAAO,QACN,UAAU,MACT,2CACC,OAAO,WACH,oCAAgB,CAAC,GACvB,CACD;AAAA,UACD;AAAA,QACD;AAAA,aACK,wBAAwB;AAC5B,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AACA,cAAI,CAAC,cAAc,QAAQ;AAAG;AAC9B,gBAAM,SAAS,IAAI;AACnB,gBAAM,SAA6B,OAAO;AAE1C,cAAI;AACH,kBAAM,SACL,KAAK,OAAO,WAAW,qBAAqB,MAAM;AAEnD,kBAAM,MAAM,kCAAc,CAAC,GAAG,MAAM,CAGjC;AACH,mBAAO,QAAQ,UAAU,OAAO,GAAG,CAAC;AAAA,UACrC,SAAS,GAAP;AACD,mBAAO,QACN,UAAU,MACT,6CACC,OAAO,WACH,oCAAgB,CAAC,GACvB,CACD;AAAA,UACD;AAAA,QACD;AAAA,aAEK,mBAAmB;AACvB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AACA,cAAI,CAAC,cAAc,QAAQ;AAAG;AAC9B,gBAAM,SAAS,IAAI;AACnB,gBAAM,SAA6B,OAAO;AAE1C,cAAI;AACH,kBAAM,SACL,KAAK,OAAO,WAAW,gBAAgB,MAAM;AAE9C,kBAAM,MAAM,kCAAc,CAAC,GAAG,MAAM,CAGjC;AACH,mBAAO,QAAQ,UAAU,OAAO,GAAG,CAAC;AAAA,UACrC,SAAS,GAAP;AACD,mBAAO,QACN,UAAU,MACT,uCACC,OAAO,WACH,oCAAgB,CAAC,GACvB,CACD;AAAA,UACD;AAAA,QACD;AAAA,aAEK,kBAAkB;AACtB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AACA,cAAI,CAAC,cAAc,UAAU,aAAa;AAAG;AAC7C,gBAAM,SAAS,IAAI;AACnB,gBAAM,SAAiB,OAAO;AAC9B,gBAAM,aACL,OAAO;AAER,gBAAM,SAA6B;AAAA,YAClC;AAAA,YACA,UAAU,WAAW;AAAA,UACtB;AACA,gBAAM,SAA6B;AAAA,YAClC,QAAQ,WAAW;AAAA,YACnB,UAAU,WAAW;AAAA,UACtB;AAEA,cAAI;AACH,kBAAM,KAAK,OAAO,WAAW,gBAC5B,QACA,WAAW,OACX,CAAC,MAAM,CACR;AACA,mBAAO,QAAQ,UAAU,EAAE;AAAA,UAC5B,SAAS,GAAP;AACD,mBAAO,QACN,UAAU,MACT,sCACC,OAAO,WACH,oCAAgB,CAAC,GACvB,CACD;AAAA,UACD;AAAA,QACD;AAAA,aAEK,qBAAqB;AACzB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AACA,cAAI,CAAC,cAAc,UAAU,aAAa;AAAG;AAC7C,gBAAM,SAAS,IAAI;AACnB,gBAAM,SAAiB,OAAO;AAC9B,gBAAM,aACL,OAAO;AAER,gBAAM,SAA6B;AAAA,YAClC;AAAA,YACA,UAAU,WAAW;AAAA,UACtB;AACA,gBAAM,SAA6B;AAAA,YAClC,QAAQ,WAAW;AAAA,YACnB,UAAU,WAAW;AAAA,UACtB;AAEA,cAAI;AACH,kBAAM,KAAK,OAAO,WAAW,mBAC5B,QACA,WAAW,OACX,CAAC,MAAM,CACR;AACA,mBAAO,QAAQ,UAAU,EAAE;AAAA,UAC5B,SAAS,GAAP;AACD,mBAAO,QACN,UAAU,MACT,yCACC,OAAO,WACH,oCAAgB,CAAC,GACvB,CACD;AAAA,UACD;AAAA,QACD;AAAA,aAEK,mBAAmB;AACvB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AACA,cAAI,CAAC,cAAc,QAAQ;AAAG;AAC9B,gBAAM,EAAE,WAAW,IAAI;AAEvB,cAAI;AACH,kBAAM,KAAK,OAAO,WAAW,MAC3B,IAAI,MAAM,EACV,YAAY;AACd,iBAAK,WAAW,OAAO,MAAM;AAC7B,iBAAK,IAAI,KAAK,QAAQ,6BAA6B;AAAA,UACpD,SAAS,GAAP;AACD,mBAAO,QACN,UAAU,MACT,mCAAmC,WAAW,oCAC7C,CACD,GACD,CACD;AAAA,UACD;AACA,iBAAO,QAAQ,UAAU,EAAE;AAAA,QAC5B;AAAA,aAEK,uBAAuB;AAC3B,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AACA,cAAI,CAAC,cAAc,UAAU,YAAY,UAAU;AAClD;AACD,gBAAM,EAAE,QAAQ,UAAU,aAAa,IAAI;AAC3C,cACC,+BAAQ,QAAQ,KAChB,SAAS,MACR,CAAC,SAAkB,OAAO,SAAS,QACpC,GACC;AAED,kBAAM,UAAU,OAAO,KAAK,QAAQ;AACpC,gBAAI;AACJ,gBAAI;AACH,oBAAM,SAAS,0CACd,UACA,OACD;AACA,+BAAiB,qCAAgB,SAAS,MAAM;AAAA,YACjD,SAAS,GAAP;AACD,qBAAO,QAAQ,UAAU,MAAM,oCAAgB,CAAC,CAAC,CAAC;AAAA,YACnD;AAGA,gBAAI;AACH,oBAAM,KAAK,OAAO,WAAW,MAC3B,IAAI,MAAM,EACV,oBACA,eAAe,MACf,eAAe,cAChB;AACD,mBAAK,IAAI,KACR,QAAQ,iCACT;AACA,qBAAO,QAAQ,UAAU,EAAE;AAAA,YAC5B,SAAS,GAAP;AACD,kBACC,aAAa,8BACb,EAAE,SAAS,gCAAgB,uBAC1B;AACD,uBAAO,QAAQ,UAAU,cAAc;AAAA,cACxC,OAAO;AACN,uBAAO,QACN,UAAU,MAAM,oCAAgB,CAAC,CAAC,CACnC;AAAA,cACD;AAAA,YACD;AAAA,UACD,OAAO;AACN,mBAAO,QACN,UAAU,MAAM,+BAA+B,CAChD;AAAA,UACD;AAAA,QACD;AAAA,aAEK,uBAAuB;AAC3B,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AACA,cAAI,CAAC,cAAc,QAAQ;AAAG;AAC9B,gBAAM,EAAE,WAAW,IAAI;AAEvB,cAAI;AACH,kBAAM,KAAK,OAAO,WAAW,MAC3B,IAAI,MAAM,EACV,oBAAoB;AACtB,iBAAK,IAAI,KACR,QAAQ,iCACT;AACA,mBAAO,QAAQ,UAAU,EAAE;AAAA,UAC5B,SAAS,GAAP;AACD,mBAAO,QAAQ,UAAU,MAAM,oCAAgB,CAAC,CAAC,CAAC;AAAA,UACnD;AAAA,QACD;AAAA,aAEK,gBAAgB;AACpB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AAEA,cAAI;AACH,kBAAM,KAAK,cACV,uBACA,MACA,IACD;AACA,kBAAM,SAAS,MAAM,KAAK,OAAO,oBAAoB;AACrD,kBAAM,KAAK,cACV,qBACA,MACA,IACD;AACA,kBAAM,KAAK,cACV,sBACA,KAAK,OAAO,eACZ,IACD;AACA,mBAAO,QAAQ,UAAU,OAAO,MAAM,CAAC;AAAA,UACxC,SAAS,GAAP;AACD,iBAAK,IAAI,MACR,qCAAqC,oCACpC,CACD,GACD;AACA,mBAAO,QACN,UAAU,MACT,qCAAqC,oCACpC,CACD,GACD,CACD;AAAA,UACD,UAAE;AACD,kBAAM,KAAK,cACV,uBACA,OACA,IACD;AAAA,UACD;AAAA,QACD;AAAA,aAEK,eAAe;AACnB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AAGA,cAAI,CAAC,cAAc,UAAU,gBAAgB,SAAS;AACrD;AACD,gBAAM;AAAA,YACL;AAAA,YACA,UAAU;AAAA,YACV;AAAA,YACA;AAAA,YACA;AAAA,cACG,IAAI;AACR,cAAI,OAAO,WAAW,UAAU;AAC/B,mBAAO,QACN,UAAU,MAAM,yBAAyB,CAC1C;AAAA,UACD;AACA,cAAI,iBAAiB,QAAW;AAC/B,gBAAI,OAAO,kBAAkB,UAAU;AACtC,qBAAO,QACN,UAAU,MACT,+CACD,CACD;AAAA,YACD,WAAW,gBAAgB,GAAG;AAC7B,qBAAO,QACN,UAAU,MACT,oCACD,CACD;AAAA,YACD;AAAA,UACD;AACA,cACC,OAAO,iBAAiB,YACxB,OAAO,iBAAiB,UACvB;AACD,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD,WAAW,OAAO,YAAY,UAAU;AACvC,mBAAO,QACN,UAAU,MAAM,0BAA0B,CAC3C;AAAA,UACD;AACA,cAAI,QAAQ,UAAa,CAAC,+BAAQ,IAAI,GAAG;AACxC,mBAAO,QACN,UAAU,MACT,uCACD,CACD;AAAA,UACD;AAEA,gBAAM,OAAO,KAAK,OAAO,WAAW,MAAM,IAAI,MAAM;AACpD,cAAI,CAAC,MAAM;AACV,mBAAO,QACN,UAAU,MAAM,QAAQ,uBAAuB,CAChD;AAAA,UACD;AACA,gBAAM,WAAW,KAAK,YAAY,wCAAiB,CAAC;AACpD,cAAI,CAAC,UAAU;AACd,mBAAO,QACN,UAAU,MACT,YAAY,wCAAwC,SACrD,CACD;AAAA,UACD;AACA,cAAI;AACJ,cAAI;AACH,kBAAO,SAAS,eAAuB;AAAA,UACxC,SAAS,GAAP;AACD,mBAAO,QAAQ,UAAU,MAAM,oCAAgB,CAAC,CAAC,CAAC;AAAA,UACnD;AACA,cAAI,CAAC,IAAI,YAAY,GAAG;AACvB,mBAAO,QACN,UAAU,MACT,QAAQ,oBAAoB,sCAAsC,cACnE,CACD;AAAA,UACD,WAAW,CAAE,YAAW,MAAM;AAC7B,mBAAO,QACN,UAAU,MACT,eAAe,iCAAiC,cACjD,CACD;AAAA,UACD;AAEA,cAAI;AACH,kBAAM,SAAU,IAAY,SAAS,KAAK,GAAG;AAC7C,kBAAM,SAAS,OACZ,MAAM,OAAO,GAAG,IAAI,IACpB,MAAM,OAAO;AAChB,mBAAO,QAAQ,UAAU,OAAO,MAAM,CAAC;AAAA,UACxC,SAAS,GAAP;AACD,mBAAO,QAAQ,UAAU,MAAM,oCAAgB,CAAC,CAAC,CAAC;AAAA,UACnD;AAAA,QACD;AAAA,aAEK,iBAAiB;AACrB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AACA,cAAI,CAAC,KAAK,cAAc;AACvB,iBAAK,eAAe,IAAI,wCAAc;AACtC,iBAAK,aAAa,SAAS,8CAC1B,MACA,KACD;AAEA,iBAAK,OAAO,gBAAgB;AAAA,cAC3B,YAAY,CAAC,KAAK,YAAY;AAAA,YAC/B,CAAC;AAED,iBAAK,aAAa,OAAO,GAAG,QAAQ,CAAC,SAAS;AAC7C,mBAAK,eAAe;AAAA,gBACnB,MAAM;AAAA,gBACN,MAAM;AAAA,cACP,CAAC;AAAA,YACF,CAAC;AAAA,UACF;AACA,iBAAO,QAAQ,UAAU,EAAE;AAAA,QAC5B;AAAA,aAEK,mBAAmB;AACvB,cAAI,CAAC,KAAK,aAAa;AACtB,mBAAO,QACN,UAAU,MACT,yCACD,CACD;AAAA,UACD;AACA,cAAI,KAAK,cAAc;AACtB,iBAAK,OAAO,gBAAgB;AAAA,cAC3B,YAAY,CAAC;AAAA,YACd,CAAC;AACD,iBAAK,aAAa,MAAM;AACxB,iBAAK,eAAe;AAAA,UACrB;AACA,iBAAO,QAAQ,UAAU,EAAE;AAAA,QAC5B;AAAA;AAAA,IAEF;AAAA,EACD;AACD;AAEA,IAAI,OAAO,QAAQ;AAElB,SAAO,UAAU,CAAC,YACjB,IAAI,OAAO,OAAO;AACpB,OAAO;AAEN,EAAC,OAAM,IAAI,OAAO,GAAG;AACtB;AAEA,QAAQ,GAAG,sBAAsB,CAAC,MAAM;AACvC,QAAM;AACP,CAAC;",
  "names": []
}
