{
  "version": 3,
  "sources": ["../../node_modules/@material-ui/icons/Sync.js", "../../node_modules/@material-ui/icons/LiveHelp.js", "../src/index.tsx", "../src/components/UpdateDeviceConfig.tsx", "../src/components/TooltipIcon.tsx"],
  "sourcesContent": ["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z\"\n}), 'Sync');\n\nexports.default = _default;", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 2H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h4l3 3 3-3h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-6 16h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 11.9 13 12.5 13 14h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\"\n}), 'LiveHelp');\n\nexports.default = _default;", "import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// import { OnSettingsChangedCallback } from \"./pages/settings\";\nimport { SettingsApp } from \"iobroker-react/app\";\nimport { useSettings, useI18n } from \"iobroker-react/hooks\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SyncIcon from \"@material-ui/icons/Sync\";\nimport Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { UpdateDeviceConfig } from \"./components/UpdateDeviceConfig\";\nimport { TooltipIcon } from \"./components/TooltipIcon\";\nimport type { Translations } from \"iobroker-react/i18n\";\nimport { useAPI } from \"./lib/useAPI\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n\tcreateStyles({\n\t\troot: {\n\t\t\tdisplay: \"flex\",\n\t\t\tflexGrow: 1,\n\t\t\tflexFlow: \"column nowrap\",\n\t\t\tgap: theme.spacing(8),\n\t\t},\n\t\tkeyGrid: {\n\t\t\tdisplay: \"grid\",\n\t\t\tgridTemplateColumns: \"1fr auto\",\n\t\t\talignItems: \"center\",\n\t\t\tgap: theme.spacing(2),\n\t\t},\n\t\tkeyGridLabel: {\n\t\t\tmarginTop: theme.spacing(2),\n\t\t\tgridColumn: \"1 / span 2\",\n\t\t},\n\t\tkeyGrid_TextField: {\n\t\t\tflexGrow: 1,\n\t\t\t// flexBasis: \"100%\",\n\t\t},\n\t\tkeyGrid_Button: {\n\t\t\tflexGrow: 0,\n\t\t},\n\t}),\n);\n\nconst networkKeyFields = [\n\t[\n\t\t2 /* SecurityClass.S2_AccessControl */,\n\t\t\"networkKey_S2_AccessControl\",\n\t\t\"S2 Access Control\",\n\t],\n\t[\n\t\t1 /* SecurityClass.S2_Authenticated */,\n\t\t\"networkKey_S2_Authenticated\",\n\t\t\"S2 Authenticated\",\n\t],\n\t[\n\t\t0 /* SecurityClass.S2_Unauthenticated */,\n\t\t\"networkKey_S2_Unauthenticated\",\n\t\t\"S2 Unauthenticated\",\n\t],\n\t[7 /* SecurityClass.S0_Legacy */, \"networkKey_S0\", \"S0 (Legacy)\"],\n] as const;\n\nconst SettingsPageContent: React.FC = React.memo(() => {\n\tconst { settings, originalSettings, setSettings } =\n\t\tuseSettings<ioBroker.AdapterConfig>();\n\tconst classes = useStyles();\n\tconst { translate: _, language } = useI18n();\n\tconst api = useAPI();\n\n\tconst handleChange = <T extends keyof ioBroker.AdapterConfig>(\n\t\toption: T,\n\t\tvalue: ioBroker.AdapterConfig[T],\n\t) => {\n\t\tsetSettings((s) => ({\n\t\t\t...s,\n\t\t\t[option]: value,\n\t\t}));\n\t};\n\n\tconst generateNetworkKey = (which: keyof ioBroker.AdapterConfig) => {\n\t\tif (\n\t\t\t!settings[which] ||\n\t\t\tsettings[which] !== originalSettings[which] ||\n\t\t\tconfirm(_(\"network key confirm\"))\n\t\t) {\n\t\t\tconst bytes = new Uint8Array(16);\n\t\t\twindow.crypto.getRandomValues(bytes);\n\t\t\tconst hexKey = [...bytes]\n\t\t\t\t.map((x) => x.toString(16).padStart(2, \"0\"))\n\t\t\t\t.join(\"\");\n\t\t\thandleChange(which, hexKey);\n\t\t}\n\t};\n\n\tconst validateNetworkKey = (which: keyof ioBroker.AdapterConfig) => {\n\t\tconst networkKey = settings[which] as string | undefined;\n\t\tif (!networkKey) return;\n\t\tif (!/[0-9a-fA-F]{32}/.test(networkKey)) {\n\t\t\talert(_(\"Invalid network key\"));\n\t\t\t// reset\n\t\t\thandleChange(which, originalSettings[which]);\n\t\t}\n\t};\n\n\tconst handleNetworkKeyPaste = (\n\t\twhich: keyof ioBroker.AdapterConfig,\n\t\te: React.ClipboardEvent<HTMLTextAreaElement | HTMLInputElement>,\n\t) => {\n\t\t// Stop data actually being pasted\n\t\te.stopPropagation();\n\t\te.preventDefault();\n\n\t\t// Get pasted data via clipboard API\n\t\t// @ts-expect-error browser compatibility\n\t\tconst clipboardData = e.clipboardData || window.clipboardData;\n\t\tlet pastedData: string = clipboardData.getData(\"Text\");\n\n\t\tif (pastedData) {\n\t\t\t// clean up any unwanted fragents\n\t\t\tpastedData = pastedData\n\t\t\t\t.trim()\n\t\t\t\t.replace(/0x/g, \"\")\n\t\t\t\t.replace(/[^0-9a-fA-F]+/g, \"\")\n\t\t\t\t.toLowerCase()\n\t\t\t\t.slice(0, 32);\n\t\t}\n\t\thandleChange(which, pastedData);\n\t};\n\n\tconst [serialPorts, setSerialPorts] = React.useState<string[]>([]);\n\tReact.useEffect(() => {\n\t\tapi.listSerialPorts()\n\t\t\t.then((ports) => {\n\t\t\t\tif (ports.length) {\n\t\t\t\t\tsetSerialPorts(ports);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.error(`Cannot retrieve serial ports: ${e}`);\n\t\t\t});\n\t}, []);\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<Grid container spacing={8}>\n\t\t\t\t<Grid container item xs={12} sm spacing={2} direction=\"column\">\n\t\t\t\t\t<Grid item xs>\n\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\toptions={serialPorts}\n\t\t\t\t\t\t\tfreeSolo={true}\n\t\t\t\t\t\t\tforcePopupIcon={true}\n\t\t\t\t\t\t\tnoOptionsText=\"\"\n\t\t\t\t\t\t\tautoSelect={true}\n\t\t\t\t\t\t\tclearOnBlur={true}\n\t\t\t\t\t\t\tonChange={(event, value) =>\n\t\t\t\t\t\t\t\thandleChange(\"serialport\", value ?? \"\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trenderInput={(props) => (\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t\t\t\tlabel={_(\"Select serial port\")}\n\t\t\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tvalue={settings.serialport}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Typography variant=\"body2\">\n\t\t\t\t\t\t\t{_(\"hosted port tip\")}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Grid item xs>\n\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\tlabel={_(\n\t\t\t\t\t\t\t\t\"Disable restarting the controller on startup\",\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\tchecked={settings.disableSoftReset}\n\t\t\t\t\t\t\t\t\tonChange={(event, checked) =>\n\t\t\t\t\t\t\t\t\t\thandleChange(\n\t\t\t\t\t\t\t\t\t\t\t\"disableSoftReset\",\n\t\t\t\t\t\t\t\t\t\t\tchecked,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Typography variant=\"body2\">\n\t\t\t\t\t\t\t{_(\n\t\t\t\t\t\t\t\t\"You can try this if the adapter does not start after updating to 2.3 or higher.\",\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\thref={\n\t\t\t\t\t\t\t\t\tlanguage === \"de\"\n\t\t\t\t\t\t\t\t\t\t? \"https://github.com/AlCalzone/ioBroker.zwave2/blob/master/docs/de/bei-problemen.md#der-adapter-startet-nach-update-auf-version-23-oder-h\u00F6her-nicht\"\n\t\t\t\t\t\t\t\t\t\t: \"https://github.com/AlCalzone/ioBroker.zwave2/blob/master/docs/en/troubleshooting.md#the-adapter-does-not-start-after-updating-to-version-23-or-higher\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{_(\"But read this first!\")}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Grid item xs>\n\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\tlabel={_(\"Write a detailed logfile\")}\n\t\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\tchecked={settings.writeLogFile}\n\t\t\t\t\t\t\t\t\tonChange={(event, checked) =>\n\t\t\t\t\t\t\t\t\t\thandleChange(\"writeLogFile\", checked)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Typography variant=\"body2\">\n\t\t\t\t\t\t\t{_(\n\t\t\t\t\t\t\t\t\"This should only be set for debugging purposes.\",\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Grid item xs>\n\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\tlabel={_(\"Preserve state names\")}\n\t\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\tchecked={settings.preserveStateNames}\n\t\t\t\t\t\t\t\t\tonChange={(event, checked) =>\n\t\t\t\t\t\t\t\t\t\thandleChange(\n\t\t\t\t\t\t\t\t\t\t\t\"preserveStateNames\",\n\t\t\t\t\t\t\t\t\t\t\tchecked,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Grid item xs>\n\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\tlabel={\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t{_(\"Legacy switch compatibility\")}{\" \"}\n\t\t\t\t\t\t\t\t\t<TooltipIcon\n\t\t\t\t\t\t\t\t\t\ttooltip={_(\"switch compat tooltip\")}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\tchecked={settings.switchCompat}\n\t\t\t\t\t\t\t\t\tonChange={(event, checked) =>\n\t\t\t\t\t\t\t\t\t\thandleChange(\"switchCompat\", checked)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\n\t\t\t\t<Grid item xs={12} sm={7} className={classes.keyGrid}>\n\t\t\t\t\t<Typography\n\t\t\t\t\t\tvariant=\"body1\"\n\t\t\t\t\t\tclassName={classes.keyGridLabel}\n\t\t\t\t\t>\n\t\t\t\t\t\t{_(\"Network keys for secure communication\")}\n\t\t\t\t\t\t<TooltipIcon tooltip={_(\"network key tooltip\")} />\n\t\t\t\t\t</Typography>\n\n\t\t\t\t\t{networkKeyFields.map(\n\t\t\t\t\t\t([securityClass, property, label]) => (\n\t\t\t\t\t\t\t<React.Fragment\n\t\t\t\t\t\t\t\tkey={`security-class-${securityClass}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\tclassName={classes.keyGrid_TextField}\n\t\t\t\t\t\t\t\t\tlabel={label}\n\t\t\t\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t\t\t\tmaxLength: 32,\n\t\t\t\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\t\t\tfontFamily: \"monospace\",\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tonPaste: handleNetworkKeyPaste.bind(\n\t\t\t\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\t\t\t\tproperty,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\t\t\t\tInputLabelProps={{\n\t\t\t\t\t\t\t\t\t\t// Avoid overlapping the text if it was filled out\n\t\t\t\t\t\t\t\t\t\tshrink: !!settings[property],\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tvalue={settings[property]}\n\t\t\t\t\t\t\t\t\tonChange={(event) =>\n\t\t\t\t\t\t\t\t\t\thandleChange(\n\t\t\t\t\t\t\t\t\t\t\tproperty,\n\t\t\t\t\t\t\t\t\t\t\tevent.target.value,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tonBlur={() => validateNetworkKey(property)}\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tclassName={classes.keyGrid_Button}\n\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\tstartIcon={<SyncIcon />}\n\t\t\t\t\t\t\t\t\tonClick={() => generateNetworkKey(property)}\n\t\t\t\t\t\t\t\t\tstyle={{ whiteSpace: \"nowrap\" }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{_(\"Generate key\")}\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t),\n\t\t\t\t\t)}\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\n\t\t\t<UpdateDeviceConfig />\n\t\t</div>\n\t);\n});\n\nconst migrateSettings = (settings: ioBroker.AdapterConfig) => {\n\tif (settings.networkKey) {\n\t\tsettings.networkKey_S0 = settings.networkKey;\n\t\tdelete settings.networkKey;\n\t}\n};\n\nconst translations: Translations = {\n\ten: require(\"./i18n/en.json\"),\n\tde: require(\"./i18n/de.json\"),\n\tru: require(\"./i18n/ru.json\"),\n\tpt: require(\"./i18n/pt.json\"),\n\tnl: require(\"./i18n/nl.json\"),\n\tfr: require(\"./i18n/fr.json\"),\n\tit: require(\"./i18n/it.json\"),\n\tes: require(\"./i18n/es.json\"),\n\tpl: require(\"./i18n/pl.json\"),\n\t\"zh-cn\": require(\"./i18n/zh-cn.json\"),\n};\n\nconst Root: React.FC = () => {\n\treturn (\n\t\t<SettingsApp\n\t\t\tname=\"zwave2\"\n\t\t\tafterLoad={migrateSettings}\n\t\t\ttranslations={translations}\n\t\t>\n\t\t\t<SettingsPageContent />\n\t\t</SettingsApp>\n\t);\n};\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n", "import React from \"react\";\nimport {\n\tuseIoBrokerState,\n\tuseAdapter,\n\tuseGlobals,\n\tuseI18n,\n} from \"iobroker-react/hooks\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useAPI } from \"../lib/useAPI\";\n\nconst useStyles = makeStyles((theme) => ({\n\tbutton: {\n\t\tmargin: theme.spacing(1, 0),\n\t},\n}));\n\nexport const UpdateDeviceConfig: React.FC = () => {\n\tconst { alive: adapterRunning, connected: driverReady } = useAdapter();\n\tconst { translate: _ } = useI18n();\n\tconst classes = useStyles();\n\n\tconst { namespace } = useGlobals();\n\tconst api = useAPI();\n\n\tconst [configUpdate] = useIoBrokerState<string>({\n\t\tid: `${namespace}.info.configUpdate`,\n\t});\n\tconst [configVersion] = useIoBrokerState<string>({\n\t\tid: `${namespace}.info.configVersion`,\n\t});\n\tconst [configUpdating] = useIoBrokerState<string>({\n\t\tid: `${namespace}.info.configUpdating`,\n\t});\n\tconst [busy, setBusy] = React.useState(false);\n\n\tasync function update(): Promise<void> {\n\t\tsetBusy(true);\n\t\tconst result = await api.updateConfig();\n\t\tsetBusy(false);\n\t\tif (!result) alert(_(\"Updating the configuration DB failed!\"));\n\t}\n\n\tif (!adapterRunning || !driverReady) return <></>;\n\tif (!configUpdate) {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Typography variant=\"body2\">\n\t\t\t\t\t{_(\"Configuration DB is up to date\")}\n\t\t\t\t\t<br />\n\t\t\t\t\t{_(\"Installed version\")}: {configVersion}\n\t\t\t\t</Typography>\n\t\t\t</>\n\t\t);\n\t} else if (busy || configUpdating) {\n\t\treturn (\n\t\t\t<Typography variant=\"body2\">\n\t\t\t\t{_(\"Updating configuration DB - please wait...\")}\n\t\t\t</Typography>\n\t\t);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Typography variant=\"body2\">\n\t\t\t\t{_(\"Update for configuration DB available\")}: {configUpdate}\n\t\t\t</Typography>\n\t\t\t<Typography variant=\"body2\">\n\t\t\t\t{_(\"Installed version\")}: {configVersion}\n\t\t\t</Typography>\n\t\t\t<Button\n\t\t\t\tclassName={classes.button}\n\t\t\t\tvariant=\"contained\"\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tonClick={() => update()}\n\t\t\t\tstartIcon={<GetAppIcon />}\n\t\t\t>\n\t\t\t\t{_(\"Update configuration DB\")}\n\t\t\t</Button>\n\t\t\t<Typography variant=\"body2\">\n\t\t\t\t{_(\"config update disclaimer\")}\n\t\t\t</Typography>\n\t\t</div>\n\t);\n};\n", "import Tooltip from \"@material-ui/core/Tooltip\";\nimport React from \"react\";\nimport LiveHelpIcon from \"@material-ui/icons/LiveHelp\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n\ttooltip: {\n\t\tverticalAlign: \"middle\",\n\t},\n\ticon: {\n\t\tcolor: theme.palette.text.hint,\n\t\tcursor: \"help\",\n\t},\n}));\n\nexport interface TooltipIconProps {\n\ttooltip: string;\n}\n\nexport const TooltipIcon: React.FC<TooltipIconProps> = (props) => {\n\tconst classes = useStyles();\n\treturn (\n\t\t<Tooltip title={props.tooltip} className={classes.tooltip}>\n\t\t\t<LiveHelpIcon className={classes.icon} />\n\t\t</Tooltip>\n\t);\n};\n"],
  "mappings": "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",
  "names": ["require_Sync", "__commonJSMin", "exports", "_interopRequireDefault", "_interopRequireWildcard", "React", "_createSvgIcon", "_default", "require_LiveHelp", "__commonJSMin", "exports", "_interopRequireDefault", "_interopRequireWildcard", "React", "_createSvgIcon", "_default", "import_react", "import_react_dom", "import_Grid", "import_TextField", "import_Typography", "import_Sync", "import_Button", "import_Checkbox", "import_FormControlLabel", "import_react", "import_GetApp", "import_Button", "import_Typography", "useStyles", "makeStyles_default", "theme", "UpdateDeviceConfig", "adapterRunning", "driverReady", "useAdapter", "_", "useI18n", "classes", "namespace", "useGlobals", "api", "useAPI", "configUpdate", "useIoBrokerState", "configVersion", "configUpdating", "busy", "setBusy", "React", "update", "result", "Typography", "Button", "GetAppIcon", "import_Tooltip", "import_react", "import_LiveHelp", "useStyles", "makeStyles_default", "theme", "TooltipIcon", "props", "classes", "React", "Tooltip", "LiveHelpIcon", "useStyles", "makeStyles_default", "theme", "createStyles", "networkKeyFields", "SettingsPageContent", "React", "settings", "originalSettings", "setSettings", "useSettings", "classes", "_", "language", "useI18n", "api", "useAPI", "handleChange", "option", "value", "s", "generateNetworkKey", "which", "bytes", "hexKey", "x", "validateNetworkKey", "networkKey", "handleNetworkKeyPaste", "e", "pastedData", "serialPorts", "setSerialPorts", "ports", "Grid", "Autocomplete_default", "event", "props", "TextField", "Typography", "FormControlLabel", "Checkbox", "checked", "TooltipIcon", "securityClass", "property", "label", "Button", "SyncIcon", "UpdateDeviceConfig", "migrateSettings", "translations", "Root", "SettingsApp", "ReactDOM"]
}
