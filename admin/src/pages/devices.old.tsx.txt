			<table>
				<thead>
					<tr>
						<td>#</td>
						<td>{_("Name")}</td>
						<td>{_("Type")}</td>
						<td>{_("Status")}</td>
						<td>{_("Header_Actions")}</td>
					</tr>
				</thead>
				<tbody>
					{devicesAsArray.length ? (
						devicesAsArray.map(({ value, status }) => {
							const nodeId = value.native.id as number;
							const supportsFirmwareUpdate =
								!!value.native.supportsFirmwareUpdate;

							const nodeHealStatus = networkHealProgress[nodeId];
							let healIconCssClass: string;
							let healIconTooltip: string;
							let healIconName: string;
							switch (nodeHealStatus) {
								case "done":
									healIconCssClass =
										"green-text text-darken-4";
									healIconTooltip = "done";
									healIconName = "done";
									break;
								case "skipped":
									healIconCssClass =
										"orange-text text-darken-3";
									healIconTooltip = "skipped";
									healIconName = "redo";
									break;
								case "failed":
									healIconCssClass = "red-text text-darken-4";
									healIconTooltip = "failed";
									healIconName = "error_outline";
									break;
								case "pending":
									healIconCssClass =
										"light-blue-text text-accent-4 working";
									healIconTooltip = "pending";
									healIconName = "autorenew";
									break;
							}
							return (
								<tr key={nodeId}>
									<td>{nodeId}</td>
									<td>
										{value.native.secure === true && (
											<>
												<i
													className="material-icons tiny"
													title={_(
														"device is secure",
													)}
													style={{
														verticalAlign: "bottom",
													}}
												>
													lock_outline
												</i>
												&nbsp;
											</>
										)}
										{value.common.name}
									</td>
									<td>
										{(value.native as any).type.specific ??
											(value.native as any).type
												.generic ??
											_("unknown")}
									</td>
									<td>
										{/* Whether the device is reachable */}
										<i
											className={`material-icons ${statusToCssClass(
												status,
											)}`}
											title={_(status ?? "unknown")}
										>
											{statusToIconName(status)}
										</i>
										{/* While healing the network also show the current progress */}
										{healingNetwork && (
											<>
												{" "}
												<i
													className={`material-icons ${healIconCssClass}`}
													title={_(healIconTooltip)}
												>
													{healIconName}
												</i>
											</>
										)}
									</td>
									<td>
										<a
											className="btn-small"
											onClick={() =>
												setCurActionsModal(nodeId)
											}
										>
											<i className="material-icons">
												more_horiz
											</i>
										</a>
										{/* Modal to edit this node */}
										{/* <Modal
											id={`modalEditNode${nodeId}`}
											title={`Node #${nodeId}`}
											yesButtonText={_("close")}
											open={curActionsModal === nodeId}
											content={
												<NodeActions
													nodeId={nodeId}
													status={status}
													actions={{
														remove: removeFailedNode.bind(
															undefined,
															nodeId,
														),
														refreshInfo:
															refreshNodeInfo.bind(
																undefined,
																nodeId,
															),
														updateFirmware:
															supportsFirmwareUpdate
																? beginFirmwareUpdate.bind(
																		undefined,
																		nodeId,
																  )
																: undefined,
														abortFirmwareUpdate:
															supportsFirmwareUpdate
																? abortFirmwareUpdate.bind(
																		undefined,
																		nodeId,
																  )
																: undefined,
														pollFirmwareUpdateStatus:
															supportsFirmwareUpdate
																? pollFirmwareUpdateStatus.bind(
																		undefined,
																		nodeId,
																  )
																: undefined,
													}}
													close={() =>
														setCurActionsModal(
															undefined,
														)
													}
												/>
											}
											onClose={() =>
												setCurActionsModal(undefined)
											}
										/> */}
									</td>
								</tr>
							);
						})
					) : (
						<tr>
							<td colSpan={5} style={{ textAlign: "center" }}>
								{_("No devices present")}
							</td>
						</tr>
					)}
				</tbody>
			</table>

